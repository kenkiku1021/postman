/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 11);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* unknown exports provided */
/* all exports used */
/*!****************************!*\
  !*** ./src/models/user.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var m = __webpack_require__(/*! mithril */ 1);\nvar stream = __webpack_require__(/*! mithril/stream */ 3);\n\nfunction to_s(v) {\n    if(v) {\n\treturn String(v);\n    }\n    else {\n\treturn \"\";\n    }\n}\n\nvar User = {\n    id: stream(\"\"),\n    username: stream(\"\"),\n    my_address: stream(\"\"),\n    forwarded: stream(\"\"),\n    forward_address: stream(\"\"),\n    currentPassword: stream(\"\"),\n    currentPasswordStates: stream(\"none\"),\n    newPassword: stream(\"\"),\n    confirmationPassword: stream(\"\"),\n    newPasswordStates: stream(\"none\"),\n\n    checkPassword: function(pw) {\n\tvar data = new FormData();\n\tdata.append(\"password\", pw);\n\tm.request({method: \"POST\",\n\t\t   url: \"passwd/check\",\n\t\t   serialize: function(data) {return data},\n\t\t   data: data})\n\t    .then(function(data) {\n\t\tif(data.result) {\n\t\t    User.currentPasswordStates(\"valid\");\n\t\t}\n\t\telse {\n\t\t    User.currentPasswordStates(\"invalid\");\n\t\t}\n\t    });\n    },\n    \n    setCurrentPassword: function(value) {\n\tif(value.length > 0) {\n\t    User.checkPassword(value);\n\t}\n\telse {\n\t    User.currentPasswordStates(\"none\");\n\t}\n    },\n\n    setNewPassword: function(value) {\n\tUser.newPassword(value);\n\tUser.checkNewPassword();\n    },\n\n    setConfirmationPassword: function(value) {\n\tUser.confirmationPassword(value);\n\tUser.checkNewPassword();\n    },\n\n    validatePassword: function() {\n\treturn (User.currentPasswordStates() == \"valid\"\n\t\t&& User.newPasswordStates() == \"valid\");\n    },\n\n    validateForward: function() {\n\tvar result = true;\n\tif(User.forwarded()) {\n\t    if(!User.forward_address().match(/^[A-Za-z0-9+_\\-.]+@[A-Za-z0-9+_\\-.]+$/)) {\n\t\tresult = false;\n\t    }\n\t}\n\treturn result;\n    },\n\n    checkNewPassword: function() {\n\tif(User.newPassword() != \"\") {\n\t    if(User.newPassword() == User.confirmationPassword()) {\n\t\tUser.newPasswordStates(\"valid\");\n\t    }\n\t    else {\n\t\tUser.newPasswordStates(\"invalid\");\n\t    }\n\t}\n\telse {\n\t    User.newPasswordStates(\"none\");\n\t}\n    },\n\n    load: function() {\n\tm.request({method: \"GET\",\n\t\t   url: \"info\",\n\t\t   withCredentials: true})\n\t    .then(function(result) {\n\t\tUser.id(result.id);\n\t\tUser.username(result.username);\n\t\tUser.my_address(result.my_address);\n\t\tUser.forwarded(result.forwarded);\n\t\tUser.forward_address(to_s(result.forward_address));\n\t    });\n    },\n    \n    updatePassword: function(e) {\n\tvar data = new FormData();\n\tdata.append(\"new_password\", User.newPassword());\n\tm.request({method: \"POST\",\n\t\t   url: \"passwd\",\n\t\t   serialize: function(data) {return data},\n\t\t   data: data})\n\t    .then(function(data) {\n\t\tif(data.result) {\n\t\t    alert(\"設定を更新しました。\");\n\t\t}\n\t\telse {\n\t\t    alert(\"設定の更新に失敗しました。\");\n\t\t}\n\t    })\n\t    .catch(function(e) {\n\t\talert(\"設定の更新に失敗しました。\\n\" + e)\n\t    });\n    },\n\n    updateForward: function() {\n\tif(User.forwarded()) { // 転送設定\n\t    var data = new FormData();\n\t    data.append(\"forward_address\", User.forward_address());\n\t    m.request({method: \"POST\",\n\t\t       url: \"forward\",\n\t\t       serialize: function(data) {return data},\n\t\t       data: data})\n\t\t.then(function(data) {\n\t\t    alert(\"設定を更新しました。\");\n\t\t})\n\t\t.catch(function(e) {\n\t\t    alert(\"設定の更新に失敗しました。\\n\" + e);\n\t\t});\n\t}\n\telse { // 転送解除\n\t    m.request({method: \"POST\",\n\t\t       url: \"forward/disable\",\n\t\t       withCredentials: true})\n\t\t.then(function(data) {\n\t\t    alert(\"設定を更新しました。\");\n\t\t})\n\t\t.catch(function(e) {\n\t\t    alert(\"設定の更新に失敗しました。\\n\" + e);\n\t\t});\n\t}\n    }\n};\n\nUser.create = function(username, password) {\n    var data = new FormData();\n    data.append(\"username\", username);\n    data.append(\"password\", password);\n    m.request({method: \"POST\",\n\t       url: \"user\",\n\t       serialize: function(data) { return data; },\n\t       data: data});\n};\n\nmodule.exports = User;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tb2RlbHMvdXNlci5qcz9mZmI2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBtID0gcmVxdWlyZShcIm1pdGhyaWxcIik7XG52YXIgc3RyZWFtID0gcmVxdWlyZShcIm1pdGhyaWwvc3RyZWFtXCIpO1xuXG5mdW5jdGlvbiB0b19zKHYpIHtcbiAgICBpZih2KSB7XG5cdHJldHVybiBTdHJpbmcodik7XG4gICAgfVxuICAgIGVsc2Uge1xuXHRyZXR1cm4gXCJcIjtcbiAgICB9XG59XG5cbnZhciBVc2VyID0ge1xuICAgIGlkOiBzdHJlYW0oXCJcIiksXG4gICAgdXNlcm5hbWU6IHN0cmVhbShcIlwiKSxcbiAgICBteV9hZGRyZXNzOiBzdHJlYW0oXCJcIiksXG4gICAgZm9yd2FyZGVkOiBzdHJlYW0oXCJcIiksXG4gICAgZm9yd2FyZF9hZGRyZXNzOiBzdHJlYW0oXCJcIiksXG4gICAgY3VycmVudFBhc3N3b3JkOiBzdHJlYW0oXCJcIiksXG4gICAgY3VycmVudFBhc3N3b3JkU3RhdGVzOiBzdHJlYW0oXCJub25lXCIpLFxuICAgIG5ld1Bhc3N3b3JkOiBzdHJlYW0oXCJcIiksXG4gICAgY29uZmlybWF0aW9uUGFzc3dvcmQ6IHN0cmVhbShcIlwiKSxcbiAgICBuZXdQYXNzd29yZFN0YXRlczogc3RyZWFtKFwibm9uZVwiKSxcblxuICAgIGNoZWNrUGFzc3dvcmQ6IGZ1bmN0aW9uKHB3KSB7XG5cdHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cdGRhdGEuYXBwZW5kKFwicGFzc3dvcmRcIiwgcHcpO1xuXHRtLnJlcXVlc3Qoe21ldGhvZDogXCJQT1NUXCIsXG5cdFx0ICAgdXJsOiBcInBhc3N3ZC9jaGVja1wiLFxuXHRcdCAgIHNlcmlhbGl6ZTogZnVuY3Rpb24oZGF0YSkge3JldHVybiBkYXRhfSxcblx0XHQgICBkYXRhOiBkYXRhfSlcblx0ICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRpZihkYXRhLnJlc3VsdCkge1xuXHRcdCAgICBVc2VyLmN1cnJlbnRQYXNzd29yZFN0YXRlcyhcInZhbGlkXCIpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHQgICAgVXNlci5jdXJyZW50UGFzc3dvcmRTdGF0ZXMoXCJpbnZhbGlkXCIpO1xuXHRcdH1cblx0ICAgIH0pO1xuICAgIH0sXG4gICAgXG4gICAgc2V0Q3VycmVudFBhc3N3b3JkOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRpZih2YWx1ZS5sZW5ndGggPiAwKSB7XG5cdCAgICBVc2VyLmNoZWNrUGFzc3dvcmQodmFsdWUpO1xuXHR9XG5cdGVsc2Uge1xuXHQgICAgVXNlci5jdXJyZW50UGFzc3dvcmRTdGF0ZXMoXCJub25lXCIpO1xuXHR9XG4gICAgfSxcblxuICAgIHNldE5ld1Bhc3N3b3JkOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRVc2VyLm5ld1Bhc3N3b3JkKHZhbHVlKTtcblx0VXNlci5jaGVja05ld1Bhc3N3b3JkKCk7XG4gICAgfSxcblxuICAgIHNldENvbmZpcm1hdGlvblBhc3N3b3JkOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRVc2VyLmNvbmZpcm1hdGlvblBhc3N3b3JkKHZhbHVlKTtcblx0VXNlci5jaGVja05ld1Bhc3N3b3JkKCk7XG4gICAgfSxcblxuICAgIHZhbGlkYXRlUGFzc3dvcmQ6IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gKFVzZXIuY3VycmVudFBhc3N3b3JkU3RhdGVzKCkgPT0gXCJ2YWxpZFwiXG5cdFx0JiYgVXNlci5uZXdQYXNzd29yZFN0YXRlcygpID09IFwidmFsaWRcIik7XG4gICAgfSxcblxuICAgIHZhbGlkYXRlRm9yd2FyZDogZnVuY3Rpb24oKSB7XG5cdHZhciByZXN1bHQgPSB0cnVlO1xuXHRpZihVc2VyLmZvcndhcmRlZCgpKSB7XG5cdCAgICBpZighVXNlci5mb3J3YXJkX2FkZHJlc3MoKS5tYXRjaCgvXltBLVphLXowLTkrX1xcLS5dK0BbQS1aYS16MC05K19cXC0uXSskLykpIHtcblx0XHRyZXN1bHQgPSBmYWxzZTtcblx0ICAgIH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBjaGVja05ld1Bhc3N3b3JkOiBmdW5jdGlvbigpIHtcblx0aWYoVXNlci5uZXdQYXNzd29yZCgpICE9IFwiXCIpIHtcblx0ICAgIGlmKFVzZXIubmV3UGFzc3dvcmQoKSA9PSBVc2VyLmNvbmZpcm1hdGlvblBhc3N3b3JkKCkpIHtcblx0XHRVc2VyLm5ld1Bhc3N3b3JkU3RhdGVzKFwidmFsaWRcIik7XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0XHRVc2VyLm5ld1Bhc3N3b3JkU3RhdGVzKFwiaW52YWxpZFwiKTtcblx0ICAgIH1cblx0fVxuXHRlbHNlIHtcblx0ICAgIFVzZXIubmV3UGFzc3dvcmRTdGF0ZXMoXCJub25lXCIpO1xuXHR9XG4gICAgfSxcblxuICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuXHRtLnJlcXVlc3Qoe21ldGhvZDogXCJHRVRcIixcblx0XHQgICB1cmw6IFwiaW5mb1wiLFxuXHRcdCAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZX0pXG5cdCAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcblx0XHRVc2VyLmlkKHJlc3VsdC5pZCk7XG5cdFx0VXNlci51c2VybmFtZShyZXN1bHQudXNlcm5hbWUpO1xuXHRcdFVzZXIubXlfYWRkcmVzcyhyZXN1bHQubXlfYWRkcmVzcyk7XG5cdFx0VXNlci5mb3J3YXJkZWQocmVzdWx0LmZvcndhcmRlZCk7XG5cdFx0VXNlci5mb3J3YXJkX2FkZHJlc3ModG9fcyhyZXN1bHQuZm9yd2FyZF9hZGRyZXNzKSk7XG5cdCAgICB9KTtcbiAgICB9LFxuICAgIFxuICAgIHVwZGF0ZVBhc3N3b3JkOiBmdW5jdGlvbihlKSB7XG5cdHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cdGRhdGEuYXBwZW5kKFwibmV3X3Bhc3N3b3JkXCIsIFVzZXIubmV3UGFzc3dvcmQoKSk7XG5cdG0ucmVxdWVzdCh7bWV0aG9kOiBcIlBPU1RcIixcblx0XHQgICB1cmw6IFwicGFzc3dkXCIsXG5cdFx0ICAgc2VyaWFsaXplOiBmdW5jdGlvbihkYXRhKSB7cmV0dXJuIGRhdGF9LFxuXHRcdCAgIGRhdGE6IGRhdGF9KVxuXHQgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuXHRcdGlmKGRhdGEucmVzdWx0KSB7XG5cdFx0ICAgIGFsZXJ0KFwi6Kit5a6a44KS5pu05paw44GX44G+44GX44Gf44CCXCIpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHQgICAgYWxlcnQoXCLoqK3lrprjga7mm7TmlrDjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgIJcIik7XG5cdFx0fVxuXHQgICAgfSlcblx0ICAgIC5jYXRjaChmdW5jdGlvbihlKSB7XG5cdFx0YWxlcnQoXCLoqK3lrprjga7mm7TmlrDjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgIJcXG5cIiArIGUpXG5cdCAgICB9KTtcbiAgICB9LFxuXG4gICAgdXBkYXRlRm9yd2FyZDogZnVuY3Rpb24oKSB7XG5cdGlmKFVzZXIuZm9yd2FyZGVkKCkpIHsgLy8g6Lui6YCB6Kit5a6aXG5cdCAgICB2YXIgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXHQgICAgZGF0YS5hcHBlbmQoXCJmb3J3YXJkX2FkZHJlc3NcIiwgVXNlci5mb3J3YXJkX2FkZHJlc3MoKSk7XG5cdCAgICBtLnJlcXVlc3Qoe21ldGhvZDogXCJQT1NUXCIsXG5cdFx0ICAgICAgIHVybDogXCJmb3J3YXJkXCIsXG5cdFx0ICAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24oZGF0YSkge3JldHVybiBkYXRhfSxcblx0XHQgICAgICAgZGF0YTogZGF0YX0pXG5cdFx0LnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuXHRcdCAgICBhbGVydChcIuioreWumuOCkuabtOaWsOOBl+OBvuOBl+OBn+OAglwiKTtcblx0XHR9KVxuXHRcdC5jYXRjaChmdW5jdGlvbihlKSB7XG5cdFx0ICAgIGFsZXJ0KFwi6Kit5a6a44Gu5pu05paw44Gr5aSx5pWX44GX44G+44GX44Gf44CCXFxuXCIgKyBlKTtcblx0XHR9KTtcblx0fVxuXHRlbHNlIHsgLy8g6Lui6YCB6Kej6ZmkXG5cdCAgICBtLnJlcXVlc3Qoe21ldGhvZDogXCJQT1NUXCIsXG5cdFx0ICAgICAgIHVybDogXCJmb3J3YXJkL2Rpc2FibGVcIixcblx0XHQgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlfSlcblx0XHQudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cdFx0ICAgIGFsZXJ0KFwi6Kit5a6a44KS5pu05paw44GX44G+44GX44Gf44CCXCIpO1xuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uKGUpIHtcblx0XHQgICAgYWxlcnQoXCLoqK3lrprjga7mm7TmlrDjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgIJcXG5cIiArIGUpO1xuXHRcdH0pO1xuXHR9XG4gICAgfVxufTtcblxuVXNlci5jcmVhdGUgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICB2YXIgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGRhdGEuYXBwZW5kKFwidXNlcm5hbWVcIiwgdXNlcm5hbWUpO1xuICAgIGRhdGEuYXBwZW5kKFwicGFzc3dvcmRcIiwgcGFzc3dvcmQpO1xuICAgIG0ucmVxdWVzdCh7bWV0aG9kOiBcIlBPU1RcIixcblx0ICAgICAgIHVybDogXCJ1c2VyXCIsXG5cdCAgICAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKGRhdGEpIHsgcmV0dXJuIGRhdGE7IH0sXG5cdCAgICAgICBkYXRhOiBkYXRhfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9tb2RlbHMvdXNlci5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 1 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./~/mithril/mithril.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(setImmediate, global) {new function() {\n\nfunction Vnode(tag, key, attrs0, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: {}, events: undefined, instance: undefined, skip: false}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode(\"[\", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node != null && typeof node !== \"object\") return Vnode(\"#\", undefined, undefined, node === false ? \"\" : node, undefined, undefined)\n\treturn node\n}\nVnode.normalizeChildren = function normalizeChildren(children) {\n\tfor (var i = 0; i < children.length; i++) {\n\t\tchildren[i] = Vnode.normalize(children[i])\n\t}\n\treturn children\n}\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*(\"|'|)((?:\\\\[\"'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nfunction hyperscript(selector) {\n\tif (selector == null || typeof selector !== \"string\" && typeof selector.view !== \"function\") {\n\t\tthrow Error(\"The selector must be either a string or a component.\");\n\t}\n\tif (typeof selector === \"string\" && selectorCache[selector] === undefined) {\n\t\tvar match, tag, classes = [], attributes = {}\n\t\twhile (match = selectorParser.exec(selector)) {\n\t\t\tvar type = match[1], value = match[2]\n\t\t\tif (type === \"\" && value !== \"\") tag = value\n\t\t\telse if (type === \"#\") attributes.id = value\n\t\t\telse if (type === \".\") classes.push(value)\n\t\t\telse if (match[3][0] === \"[\") {\n\t\t\t\tvar attrValue = match[6]\n\t\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\([\"'])/g, \"$1\").replace(/\\\\\\\\/g, \"\\\\\")\n\t\t\t\tif (match[4] === \"class\") classes.push(attrValue)\n\t\t\t\telse attributes[match[4]] = attrValue || true\n\t\t\t}\n\t\t}\n\t\tif (classes.length > 0) attributes.className = classes.join(\" \")\n\t\tselectorCache[selector] = function(attrs, children) {\n\t\t\tvar hasAttrs = false, childList, text\n\t\t\tvar className = attrs.className || attrs.class\n\t\t\tfor (var key in attributes) attrs[key] = attributes[key]\n\t\t\tif (className !== undefined) {\n\t\t\t\tif (attrs.class !== undefined) {\n\t\t\t\t\tattrs.class = undefined\n\t\t\t\t\tattrs.className = className\n\t\t\t\t}\n\t\t\t\tif (attributes.className !== undefined) attrs.className = attributes.className + \" \" + className\n\t\t\t}\n\t\t\tfor (var key in attrs) {\n\t\t\t\tif (key !== \"key\") {\n\t\t\t\t\thasAttrs = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Array.isArray(children) && children.length == 1 && children[0] != null && children[0].tag === \"#\") text = children[0].children\n\t\t\telse childList = children\n\t\t\treturn Vnode(tag || \"div\", attrs.key, hasAttrs ? attrs : undefined, childList, text, undefined)\n\t\t}\n\t}\n\tvar attrs, children, childrenIndex\n\tif (arguments[1] == null || typeof arguments[1] === \"object\" && arguments[1].tag === undefined && !Array.isArray(arguments[1])) {\n\t\tattrs = arguments[1]\n\t\tchildrenIndex = 2\n\t}\n\telse childrenIndex = 1\n\tif (arguments.length === childrenIndex + 1) {\n\t\tchildren = Array.isArray(arguments[childrenIndex]) ? arguments[childrenIndex] : [arguments[childrenIndex]]\n\t}\n\telse {\n\t\tchildren = []\n\t\tfor (var i = childrenIndex; i < arguments.length; i++) children.push(arguments[i])\n\t}\n\tif (typeof selector === \"string\") return selectorCache[selector](attrs || {}, Vnode.normalizeChildren(children))\n\treturn Vnode(selector, attrs && attrs.key, attrs || {}, Vnode.normalizeChildren(children), undefined, undefined)\n}\nhyperscript.trust = function(html) {\n\tif (html == null) html = \"\"\n\treturn Vnode(\"<\", undefined, undefined, html, undefined, undefined)\n}\nhyperscript.fragment = function(attrs1, children) {\n\treturn Vnode(\"[\", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\n}\nvar m = hyperscript\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error(\"Promise must be called with `new`\")\n\tif (typeof executor !== \"function\") throw new TypeError(\"executor must be a function\")\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === \"object\" || typeof value === \"function\") && typeof (then = value.then) === \"function\") {\n\t\t\t\t\tif (value === self) throw new TypeError(\"Promise can't be resolved w/ itself\")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error(\"Possible unhandled promise rejection:\", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== \"function\") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === \"function\" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === \"object\" || typeof list[i] === \"function\") && typeof list[i].then === \"function\") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\nif (typeof window !== \"undefined\") {\n\tif (typeof window.Promise === \"undefined\") window.Promise = PromisePolyfill\n\tvar PromisePolyfill = window.Promise\n} else if (typeof global !== \"undefined\") {\n\tif (typeof global.Promise === \"undefined\") global.Promise = PromisePolyfill\n\tvar PromisePolyfill = global.Promise\n} else {\n}\nvar buildQueryString = function(object) {\n\tif (Object.prototype.toString.call(object) !== \"[object Object]\") return \"\"\n\tvar args = []\n\tfor (var key0 in object) {\n\t\tdestructure(key0, object[key0])\n\t}\n\treturn args.join(\"&\")\n\tfunction destructure(key0, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key0 + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === \"[object Object]\") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key0 + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key0) + (value != null && value !== \"\" ? \"=\" + encodeURIComponent(value) : \"\"))\n\t}\n}\nvar _8 = function($window, Promise) {\n\tvar callbackCount = 0\n\tvar oncompletion\n\tfunction setCompletionCallback(callback) {oncompletion = callback}\n\tfunction finalizer() {\n\t\tvar count = 0\n\t\tfunction complete() {if (--count === 0 && typeof oncompletion === \"function\") oncompletion()}\n\t\treturn function finalize(promise0) {\n\t\t\tvar then0 = promise0.then\n\t\t\tpromise0.then = function() {\n\t\t\t\tcount++\n\t\t\t\tvar next = then0.apply(promise0, arguments)\n\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\tcomplete()\n\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t})\n\t\t\t\treturn finalize(next)\n\t\t\t}\n\t\t\treturn promise0\n\t\t}\n\t}\n\tfunction normalize(args, extra) {\n\t\tif (typeof args === \"string\") {\n\t\t\tvar url = args\n\t\t\targs = extra || {}\n\t\t\tif (args.url == null) args.url = url\n\t\t}\n\t\treturn args\n\t}\n\tfunction request(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tif (args.method == null) args.method = \"GET\"\n\t\t\targs.method = args.method.toUpperCase()\n\t\t\tvar useBody = typeof args.useBody === \"boolean\" ? args.useBody : args.method !== \"GET\" && args.method !== \"TRACE\"\n\t\t\tif (typeof args.serialize !== \"function\") args.serialize = typeof FormData !== \"undefined\" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\n\t\t\tif (typeof args.deserialize !== \"function\") args.deserialize = deserialize\n\t\t\tif (typeof args.extract !== \"function\") args.extract = extract\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\tif (useBody) args.data = args.serialize(args.data)\n\t\t\telse args.url = assemble(args.url, args.data)\n\t\t\tvar xhr = new $window.XMLHttpRequest()\n\t\t\txhr.open(args.method, args.url, typeof args.async === \"boolean\" ? args.async : true, typeof args.user === \"string\" ? args.user : undefined, typeof args.password === \"string\" ? args.password : undefined)\n\t\t\tif (args.serialize === JSON.stringify && useBody) {\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n\t\t\t}\n\t\t\tif (args.deserialize === deserialize) {\n\t\t\t\txhr.setRequestHeader(\"Accept\", \"application/json, text/*\")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t}\n\t\t\tif (typeof args.config === \"function\") xhr = args.config(xhr, args) || xhr\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t// Don't throw errors on xhr.abort(). XMLHttpRequests ends up in a state of\n\t\t\t\t// xhr.status == 0 and xhr.readyState == 4 if aborted after open, but before completion.\n\t\t\t\tif (xhr.status && xhr.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\n\t\t\t\t\t\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\n\t\t\t\t\t\t\tresolve(cast(args.type, response))\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar error = new Error(xhr.responseText)\n\t\t\t\t\t\t\tfor (var key in response) error[key] = response[key]\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (useBody && (args.data != null)) xhr.send(args.data)\n\t\t\telse xhr.send()\n\t\t})\n\t\treturn args.background === true ? promise0 : finalize(promise0)\n\t}\n\tfunction jsonp(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || \"_mithril_\" + Math.round(Math.random() * 1e16) + \"_\" + callbackCount++\n\t\t\tvar script = $window.document.createElement(\"script\")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(cast(args.type, data))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error(\"JSONP request failed\"))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tif (args.data == null) args.data = {}\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\targs.data[args.callbackKey || \"callback\"] = callbackName\n\t\t\tscript.src = assemble(args.url, args.data)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t})\n\t\treturn args.background === true? promise0 : finalize(promise0)\n\t}\n\tfunction interpolate(url, data) {\n\t\tif (data == null) return url\n\t\tvar tokens = url.match(/:[^\\/]+/gi) || []\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar key = tokens[i].slice(1)\n\t\t\tif (data[key] != null) {\n\t\t\t\turl = url.replace(tokens[i], data[key])\n\t\t\t}\n\t\t}\n\t\treturn url\n\t}\n\tfunction assemble(url, data) {\n\t\tvar querystring = buildQueryString(data)\n\t\tif (querystring !== \"\") {\n\t\t\tvar prefix = url.indexOf(\"?\") < 0 ? \"?\" : \"&\"\n\t\t\turl += prefix + querystring\n\t\t}\n\t\treturn url\n\t}\n\tfunction deserialize(data) {\n\t\ttry {return data !== \"\" ? JSON.parse(data) : null}\n\t\tcatch (e) {throw new Error(data)}\n\t}\n\tfunction extract(xhr) {return xhr.responseText}\n\tfunction cast(type0, data) {\n\t\tif (typeof type0 === \"function\") {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\tdata[i] = new type0(data[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse return new type0(data)\n\t\t}\n\t\treturn data\n\t}\n\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\n}\nvar requestService = _8(window, PromisePolyfill)\nvar coreRenderer = function($window) {\n\tvar $doc = $window.document\n\tvar $emptyFragment = $doc.createDocumentFragment()\n\tvar onevent\n\tfunction setEventCallback(callback) {return onevent = callback}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tif (typeof tag === \"string\") {\n\t\t\tswitch (tag) {\n\t\t\t\tcase \"#\": return createText(parent, vnode, nextSibling)\n\t\t\t\tcase \"<\": return createHTML(parent, vnode, nextSibling)\n\t\t\t\tcase \"[\": return createFragment(parent, vnode, hooks, ns, nextSibling)\n\t\t\t\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t\treturn vnode.dom\n\t}\n\tfunction createHTML(parent, vnode, nextSibling) {\n\t\tvar match1 = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\tvar parent1 = {caption: \"table\", thead: \"table\", tbody: \"table\", tfoot: \"table\", tr: \"tbody\", th: \"tr\", td: \"tr\", colgroup: \"table\", col: \"colgroup\"}[match1[1]] || \"div\"\n\t\tvar temp = $doc.createElement(parent1)\n\t\ttemp.innerHTML = vnode.children\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tswitch (vnode.tag) {\n\t\t\tcase \"svg\": ns = \"http://www.w3.org/2000/svg\"; break\n\t\t\tcase \"math\": ns = \"http://www.w3.org/1998/Math/MathML\"; break\n\t\t}\n\t\tvar attrs2 = vnode.attrs\n\t\tvar is = attrs2 && attrs2.is\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\t\tif (attrs2 != null) {\n\t\t\tsetAttrs(vnode, attrs2, ns)\n\t\t}\n\t\tinsertNode(parent, element, nextSibling)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== \"\") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tsetLateAttrs(vnode)\n\t\t\t}\n\t\t}\n\t\treturn element\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tvnode.state = Object.create(vnode.tag)\n\t\tvar view = vnode.tag.view\n\t\tif (view.reentrantLock != null) return $emptyFragment\n\t\tview.reentrantLock = true\n\t\tinitLifecycle(vnode.tag, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(view.call(vnode.state, vnode))\n\t\tview.reentrantLock = null\n\t\tif (vnode.instance != null) {\n\t\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as arguments\")\n\t\t\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t\tinsertNode(parent, element, nextSibling)\n\t\t\treturn element\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t\treturn $emptyFragment\n\t\t}\n\t}\n\t//update\n\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, undefined)\n\t\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\n\t\telse {\n\t\t\tif (old.length === vnodes.length) {\n\t\t\t\tvar isUnkeyed = false\n\t\t\t\tfor (var i = 0; i < vnodes.length; i++) {\n\t\t\t\t\tif (vnodes[i] != null && old[i] != null) {\n\t\t\t\t\t\tisUnkeyed = vnodes[i].key == null && old[i].key == null\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUnkeyed) {\n\t\t\t\t\tfor (var i = 0; i < old.length; i++) {\n\t\t\t\t\t\tif (old[i] === vnodes[i]) continue\n\t\t\t\t\t\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\n\t\t\t\t\t\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\n\t\t\t\t\t\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), false, ns)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\trecycling = recycling || isRecyclable(old, vnodes)\n\t\t\tif (recycling) old = old.concat(old.pool)\n\t\t\t\n\t\t\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldStart], v = vnodes[start]\n\t\t\t\tif (o === v && !recycling) oldStart++, start++\n\t\t\t\telse if (o == null) oldStart++\n\t\t\t\telse if (v == null) start++\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), recycling, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar o = old[oldEnd]\n\t\t\t\t\tif (o === v && !recycling) oldEnd--, start++\n\t\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\t\telse if (v == null) start++\n\t\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\n\t\t\t\t\t\toldEnd--, start++\n\t\t\t\t\t}\n\t\t\t\t\telse break\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldEnd], v = vnodes[end]\n\t\t\t\tif (o === v && !recycling) oldEnd--, end--\n\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\telse if (v == null) end--\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t\tif (o.dom != null) nextSibling = o.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!map) map = getKeyMap(old, oldEnd)\n\t\t\t\t\tif (v != null) {\n\t\t\t\t\t\tvar oldIndex = map[v.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tvar movable = old[oldIndex]\n\t\t\t\t\t\t\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\t\tinsertNode(parent, toFragment(movable), nextSibling)\n\t\t\t\t\t\t\told[oldIndex].skip = true\n\t\t\t\t\t\t\tif (movable.dom != null) nextSibling = movable.dom\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar dom = createNode(parent, v, hooks, undefined, nextSibling)\n\t\t\t\t\t\t\tnextSibling = dom\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t\tif (end < start) break\n\t\t\t}\n\t\t\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode.events = old.events\n\t\t\tif (shouldUpdate(vnode, old)) return\n\t\t\tif (vnode.attrs != null) {\n\t\t\t\tupdateLifecycle(vnode.attrs, vnode, hooks, recycling)\n\t\t\t}\n\t\t\tif (typeof oldTag === \"string\") {\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase \"#\": updateText(old, vnode); break\n\t\t\t\t\tcase \"<\": updateHTML(parent, old, vnode, nextSibling); break\n\t\t\t\t\tcase \"[\": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, recycling, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(old, null)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\ttoFragment(old)\n\t\t\tcreateHTML(parent, vnode, nextSibling)\n\t\t}\n\t\telse vnode.dom = old.dom, vnode.domSize = old.domSize\n\t}\n\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, recycling, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tswitch (vnode.tag) {\n\t\t\tcase \"svg\": ns = \"http://www.w3.org/2000/svg\"; break\n\t\t\tcase \"math\": ns = \"http://www.w3.org/1998/Math/MathML\"; break\n\t\t}\n\t\tif (vnode.tag === \"textarea\") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse if (old.text != null && vnode.text != null && vnode.text !== \"\") {\n\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t}\n\t\telse {\n\t\t\tif (old.text != null) old.children = [Vnode(\"#\", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\tif (vnode.text != null) vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvnode.instance = Vnode.normalize(vnode.tag.view.call(vnode.state, vnode))\n\t\tupdateLifecycle(vnode.tag, vnode, hooks, recycling)\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(old.instance, null)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction isRecyclable(old, vnodes) {\n\t\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\n\t\t\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\n\t\t\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\n\t\t\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\n\t\t\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tfunction getKeyMap(vnodes, end) {\n\t\tvar map = {}, i = 0\n\t\tfor (var i = 0; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key2 = vnode.key\n\t\t\t\tif (key2 != null) map[key2] = i\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\tfunction toFragment(vnode) {\n\t\tvar count0 = vnode.domSize\n\t\tif (count0 != null || vnode.dom == null) {\n\t\t\tvar fragment = $doc.createDocumentFragment()\n\t\t\tif (count0 > 0) {\n\t\t\t\tvar dom = vnode.dom\n\t\t\t\twhile (--count0) fragment.appendChild(dom.nextSibling)\n\t\t\t\tfragment.insertBefore(dom, fragment.firstChild)\n\t\t\t}\n\t\t\treturn fragment\n\t\t}\n\t\telse return vnode.dom\n\t}\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\tfunction setContentEditable(vnode) {\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === \"<\") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error(\"Child node of a contenteditable must be trusted\")\n\t}\n\t//remove\n\tfunction removeNodes(vnodes, start, end, context) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tif (vnode.skip) vnode.skip = false\n\t\t\t\telse removeNode(vnode, context)\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNode(vnode, context) {\n\t\tvar expected = 1, called = 0\n\t\tif (vnode.attrs && vnode.attrs.onbeforeremove) {\n\t\t\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tif (typeof vnode.tag !== \"string\" && vnode.tag.onbeforeremove) {\n\t\t\tvar result = vnode.tag.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tcontinuation()\n\t\tfunction continuation() {\n\t\t\tif (++called === expected) {\n\t\t\t\tonremove(vnode)\n\t\t\t\tif (vnode.dom) {\n\t\t\t\t\tvar count0 = vnode.domSize || 1\n\t\t\t\t\tif (count0 > 1) {\n\t\t\t\t\t\tvar dom = vnode.dom\n\t\t\t\t\t\twhile (--count0) {\n\t\t\t\t\t\t\tremoveNodeFromDOM(dom.nextSibling)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNodeFromDOM(vnode.dom)\n\t\t\t\t\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === \"string\") { //TODO test custom elements\n\t\t\t\t\t\tif (!context.pool) context.pool = [vnode]\n\t\t\t\t\t\telse context.pool.push(vnode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNodeFromDOM(node) {\n\t\tvar parent = node.parentNode\n\t\tif (parent != null) parent.removeChild(node)\n\t}\n\tfunction onremove(vnode) {\n\t\tif (vnode.attrs && vnode.attrs.onremove) vnode.attrs.onremove.call(vnode.state, vnode)\n\t\tif (typeof vnode.tag !== \"string\" && vnode.tag.onremove) vnode.tag.onremove.call(vnode.state, vnode)\n\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\telse {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//attrs2\n\tfunction setAttrs(vnode, attrs2, ns) {\n\t\tfor (var key2 in attrs2) {\n\t\t\tsetAttr(vnode, key2, null, attrs2[key2], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key2, old, value, ns) {\n\t\tvar element = vnode.dom\n\t\tif (key2 === \"key\" || key2 === \"is\" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== \"object\" || typeof value === \"undefined\" || isLifecycleMethod(key2)) return\n\t\tvar nsLastIndex = key2.indexOf(\":\")\n\t\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === \"xlink\") {\n\t\t\telement.setAttributeNS(\"http://www.w3.org/1999/xlink\", key2.slice(nsLastIndex + 1), value)\n\t\t}\n\t\telse if (key2[0] === \"o\" && key2[1] === \"n\" && typeof value === \"function\") updateEvent(vnode, key2, value)\n\t\telse if (key2 === \"style\") updateStyle(element, old, value)\n\t\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\n\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\tif (vnode.tag === \"input\" && key2 === \"value\" && vnode.dom.value === value && vnode.dom === $doc.activeElement) return\n\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\tif (vnode.tag === \"select\" && key2 === \"value\" && vnode.dom.value === value && vnode.dom === $doc.activeElement) return\n\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\tif (vnode.tag === \"option\" && key2 === \"value\" && vnode.dom.value === value) return\n\t\t\telement[key2] = value\n\t\t}\n\t\telse {\n\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\tif (value) element.setAttribute(key2, \"\")\n\t\t\t\telse element.removeAttribute(key2)\n\t\t\t}\n\t\t\telse element.setAttribute(key2 === \"className\" ? \"class\" : key2, value)\n\t\t}\n\t}\n\tfunction setLateAttrs(vnode) {\n\t\tvar attrs2 = vnode.attrs\n\t\tif (vnode.tag === \"select\" && attrs2 != null) {\n\t\t\tif (\"value\" in attrs2) setAttr(vnode, \"value\", null, attrs2.value, undefined)\n\t\t\tif (\"selectedIndex\" in attrs2) setAttr(vnode, \"selectedIndex\", null, attrs2.selectedIndex, undefined)\n\t\t}\n\t}\n\tfunction updateAttrs(vnode, old, attrs2, ns) {\n\t\tif (attrs2 != null) {\n\t\t\tfor (var key2 in attrs2) {\n\t\t\t\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\n\t\t\t}\n\t\t}\n\t\tif (old != null) {\n\t\t\tfor (var key2 in old) {\n\t\t\t\tif (attrs2 == null || !(key2 in attrs2)) {\n\t\t\t\t\tif (key2 === \"className\") key2 = \"class\"\n\t\t\t\t\tif (key2[0] === \"o\" && key2[1] === \"n\" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\n\t\t\t\t\telse if (key2 !== \"key\") vnode.dom.removeAttribute(key2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === \"value\" || attr === \"checked\" || attr === \"selectedIndex\" || attr === \"selected\" && vnode.dom === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === \"oninit\" || attr === \"oncreate\" || attr === \"onupdate\" || attr === \"onremove\" || attr === \"onbeforeremove\" || attr === \"onbeforeupdate\"\n\t}\n\tfunction isAttribute(attr) {\n\t\treturn attr === \"href\" || attr === \"list\" || attr === \"form\" || attr === \"width\" || attr === \"height\"// || attr === \"type\"\n\t}\n\tfunction isCustomElement(vnode){\n\t\treturn vnode.attrs.is || vnode.tag.indexOf(\"-\") > -1\n\t}\n\tfunction hasIntegrationMethods(source) {\n\t\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\n\t}\n\t//style\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) element.style.cssText = \"\", old = null\n\t\tif (style == null) element.style.cssText = \"\"\n\t\telse if (typeof style === \"string\") element.style.cssText = style\n\t\telse {\n\t\t\tif (typeof old === \"string\") element.style.cssText = \"\"\n\t\t\tfor (var key2 in style) {\n\t\t\t\telement.style[key2] = style[key2]\n\t\t\t}\n\t\t\tif (old != null && typeof old !== \"string\") {\n\t\t\t\tfor (var key2 in old) {\n\t\t\t\t\tif (!(key2 in style)) element.style[key2] = \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//event\n\tfunction updateEvent(vnode, key2, value) {\n\t\tvar element = vnode.dom\n\t\tvar callback = typeof onevent !== \"function\" ? value : function(e) {\n\t\t\tvar result = value.call(element, e)\n\t\t\tonevent.call(element, e)\n\t\t\treturn result\n\t\t}\n\t\tif (key2 in element) element[key2] = typeof value === \"function\" ? callback : null\n\t\telse {\n\t\t\tvar eventName = key2.slice(2)\n\t\t\tif (vnode.events === undefined) vnode.events = {}\n\t\t\tif (vnode.events[key2] === callback) return\n\t\t\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\n\t\t\tif (typeof value === \"function\") {\n\t\t\t\tvnode.events[key2] = callback\n\t\t\t\telement.addEventListener(eventName, vnode.events[key2], false)\n\t\t\t}\n\t\t}\n\t}\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === \"function\") source.oninit.call(vnode.state, vnode)\n\t\tif (typeof source.oncreate === \"function\") hooks.push(source.oncreate.bind(vnode.state, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks, recycling) {\n\t\tif (recycling) initLifecycle(source, vnode, hooks)\n\t\telse if (typeof source.onupdate === \"function\") hooks.push(source.onupdate.bind(vnode.state, vnode))\n\t}\n\tfunction shouldUpdate(vnode, old) {\n\t\tvar forceVnodeUpdate, forceComponentUpdate\n\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === \"function\") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode.tag.onbeforeupdate === \"function\") forceComponentUpdate = vnode.tag.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfunction render(dom, vnodes) {\n\t\tif (!dom) throw new Error(\"Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.\")\n\t\tvar hooks = []\n\t\tvar active = $doc.activeElement\n\t\t// First time0 rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = \"\"\n\t\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\n\t\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, undefined)\n\t\tdom.vnodes = vnodes\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t\tif ($doc.activeElement !== active) active.focus()\n\t}\n\treturn {render: render, setEventCallback: setEventCallback}\n}\nfunction throttle(callback) {\n\t//60fps translates to 16.6ms, round it down since setTimeout requires int\n\tvar time = 16\n\tvar last = 0, pending = null\n\tvar timeout = typeof requestAnimationFrame === \"function\" ? requestAnimationFrame : setTimeout\n\treturn function() {\n\t\tvar now = Date.now()\n\t\tif (last === 0 || now - last >= time) {\n\t\t\tlast = now\n\t\t\tcallback()\n\t\t}\n\t\telse if (pending === null) {\n\t\t\tpending = timeout(function() {\n\t\t\t\tpending = null\n\t\t\t\tcallback()\n\t\t\t\tlast = Date.now()\n\t\t\t}, time - (now - last))\n\t\t}\n\t}\n}\nvar _11 = function($window) {\n\tvar renderService = coreRenderer($window)\n\trenderService.setEventCallback(function(e) {\n\t\tif (e.redraw !== false) redraw()\n\t})\n\tvar callbacks = []\n\tfunction subscribe(key1, callback) {\n\t\tunsubscribe(key1)\n\t\tcallbacks.push(key1, throttle(callback))\n\t}\n\tfunction unsubscribe(key1) {\n\t\tvar index = callbacks.indexOf(key1)\n\t\tif (index > -1) callbacks.splice(index, 2)\n\t}\n    function redraw() {\n        for (var i = 1; i < callbacks.length; i += 2) {\n            callbacks[i]()\n        }\n    }\n\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\n}\nvar redrawService = _11(window)\nrequestService.setCompletionCallback(redrawService.redraw)\nvar _16 = function(redrawService0) {\n\treturn function(root, component) {\n\t\tif (component === null) {\n\t\t\tredrawService0.render(root, [])\n\t\t\tredrawService0.unsubscribe(root)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (component.view == null) throw new Error(\"m.mount(element, component) expects a component, not a vnode\")\n\t\t\n\t\tvar run0 = function() {\n\t\t\tredrawService0.render(root, Vnode(component))\n\t\t}\n\t\tredrawService0.subscribe(root, run0)\n\t\tredrawService0.redraw()\n\t}\n}\nm.mount = _16(redrawService)\nvar Promise = PromisePolyfill\nvar parseQueryString = function(string) {\n\tif (string === \"\" || string == null) return {}\n\tif (string.charAt(0) === \"?\") string = string.slice(1)\n\tvar entries = string.split(\"&\"), data0 = {}, counters = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split(\"=\")\n\t\tvar key5 = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : \"\"\n\t\tif (value === \"true\") value = true\n\t\telse if (value === \"false\") value = false\n\t\tvar levels = key5.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data0\n\t\tif (key5.indexOf(\"[\") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == \"\" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tvar isValue = j === levels.length - 1\n\t\t\tif (level === \"\") {\n\t\t\t\tvar key5 = levels.slice(0, j).join()\n\t\t\t\tif (counters[key5] == null) counters[key5] = 0\n\t\t\t\tlevel = counters[key5]++\n\t\t\t}\n\t\t\tif (cursor[level] == null) {\n\t\t\t\tcursor[level] = isValue ? value : isNumber ? [] : {}\n\t\t\t}\n\t\t\tcursor = cursor[level]\n\t\t}\n\t}\n\treturn data0\n}\nvar coreRouter = function($window) {\n\tvar supportsPushState = typeof $window.history.pushState === \"function\"\n\tvar callAsync0 = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction normalize1(fragment0) {\n\t\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\tif (fragment0 === \"pathname\" && data[0] !== \"/\") data = \"/\" + data\n\t\treturn data\n\t}\n\tvar asyncId\n\tfunction debounceAsync(callback0) {\n\t\treturn function() {\n\t\t\tif (asyncId != null) return\n\t\t\tasyncId = callAsync0(function() {\n\t\t\t\tasyncId = null\n\t\t\t\tcallback0()\n\t\t\t})\n\t\t}\n\t}\n\tfunction parsePath(path, queryData, hashData) {\n\t\tvar queryIndex = path.indexOf(\"?\")\n\t\tvar hashIndex = path.indexOf(\"#\")\n\t\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\n\t\tif (queryIndex > -1) {\n\t\t\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\n\t\t\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\n\t\t\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\n\t\t}\n\t\tif (hashIndex > -1) {\n\t\t\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\n\t\t\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\n\t\t}\n\t\treturn path.slice(0, pathEnd)\n\t}\n\tvar router = {prefix: \"#!\"}\n\trouter.getPath = function() {\n\t\tvar type2 = router.prefix.charAt(0)\n\t\tswitch (type2) {\n\t\t\tcase \"#\": return normalize1(\"hash\").slice(router.prefix.length)\n\t\t\tcase \"?\": return normalize1(\"search\").slice(router.prefix.length) + normalize1(\"hash\")\n\t\t\tdefault: return normalize1(\"pathname\").slice(router.prefix.length) + normalize1(\"search\") + normalize1(\"hash\")\n\t\t}\n\t}\n\trouter.setPath = function(path, data, options) {\n\t\tvar queryData = {}, hashData = {}\n\t\tpath = parsePath(path, queryData, hashData)\n\t\tif (data != null) {\n\t\t\tfor (var key4 in data) queryData[key4] = data[key4]\n\t\t\tpath = path.replace(/:([^\\/]+)/g, function(match2, token) {\n\t\t\t\tdelete queryData[token]\n\t\t\t\treturn data[token]\n\t\t\t})\n\t\t}\n\t\tvar query = buildQueryString(queryData)\n\t\tif (query) path += \"?\" + query\n\t\tvar hash = buildQueryString(hashData)\n\t\tif (hash) path += \"#\" + hash\n\t\tif (supportsPushState) {\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\t$window.onpopstate()\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\n\t\t\telse $window.history.pushState(state, title, router.prefix + path)\n\t\t}\n\t\telse $window.location.href = router.prefix + path\n\t}\n\trouter.defineRoutes = function(routes, resolve, reject) {\n\t\tfunction resolveRoute() {\n\t\t\tvar path = router.getPath()\n\t\t\tvar params = {}\n\t\t\tvar pathname = parsePath(path, params, params)\n\t\t\tvar state = $window.history.state\n\t\t\tif (state != null) {\n\t\t\t\tfor (var k in state) params[k] = state[k]\n\t\t\t}\n\t\t\tfor (var route0 in routes) {\n\t\t\t\tvar matcher = new RegExp(\"^\" + route0.replace(/:[^\\/]+?\\.{3}/g, \"(.*?)\").replace(/:[^\\/]+/g, \"([^\\\\/]+)\") + \"\\/?$\")\n\t\t\t\tif (matcher.test(pathname)) {\n\t\t\t\t\tpathname.replace(matcher, function() {\n\t\t\t\t\t\tvar keys = route0.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\tparams[keys[i].replace(/:|\\./g, \"\")] = decodeURIComponent(values[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(routes[route0], params, path, route0)\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(path, params)\n\t\t}\n\t\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\n\t\telse if (router.prefix.charAt(0) === \"#\") $window.onhashchange = resolveRoute\n\t\tresolveRoute()\n\t}\n\treturn router\n}\nvar _20 = function($window, redrawService0) {\n\tvar routeService = coreRouter($window)\n\tvar identity = function(v) {return v}\n\tvar render1, component, attrs3, currentPath, lastUpdate\n\tvar route = function(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error(\"Ensure the DOM element that was passed to `m.route` is not undefined\")\n\t\tvar run1 = function() {\n\t\t\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\n\t\t}\n\t\tvar bail = function(path) {\n\t\t\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\n\t\t\telse throw new Error(\"Could not resolve default route \" + defaultRoute)\n\t\t}\n\t\trouteService.defineRoutes(routes, function(payload, params, path) {\n\t\t\tvar update = lastUpdate = function(routeResolver, comp) {\n\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\tcomponent = comp != null && typeof comp.view === \"function\" ? comp : \"div\", attrs3 = params, currentPath = path, lastUpdate = null\n\t\t\t\trender1 = (routeResolver.render || identity).bind(routeResolver)\n\t\t\t\trun1()\n\t\t\t}\n\t\t\tif (payload.view) update({}, payload)\n\t\t\telse {\n\t\t\t\tif (payload.onmatch) {\n\t\t\t\t\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\n\t\t\t\t\t\tupdate(payload, resolved)\n\t\t\t\t\t}, bail)\n\t\t\t\t}\n\t\t\t\telse update(payload, \"div\")\n\t\t\t}\n\t\t}, bail)\n\t\tredrawService0.subscribe(root, run1)\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) options = {replace: true}\n\t\tlastUpdate = null\n\t\trouteService.setPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\n\troute.link = function(vnode1) {\n\t\tvnode1.dom.setAttribute(\"href\", routeService.prefix + vnode1.attrs.href)\n\t\tvnode1.dom.onclick = function(e) {\n\t\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\t\t\te.preventDefault()\n\t\t\te.redraw = false\n\t\t\tvar href = this.getAttribute(\"href\")\n\t\t\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\n\t\t\troute.set(href, undefined, undefined)\n\t\t}\n\t}\n\troute.param = function(key3) {\n\t\tif(typeof attrs3 !== \"undefined\" && typeof key3 !== \"undefined\") return attrs3[key3]\n\t\treturn attrs3\n\t}\n\treturn route\n}\nm.route = _20(window, redrawService)\nm.withAttr = function(attrName, callback1, context) {\n\treturn function(e) {\n\t\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\n\t}\n}\nvar _28 = coreRenderer(window)\nm.render = _28.render\nm.redraw = redrawService.redraw\nm.request = requestService.request\nm.jsonp = requestService.jsonp\nm.parseQueryString = parseQueryString\nm.buildQueryString = buildQueryString\nm.version = \"1.0.1\"\nm.vnode = Vnode\nif (true) module[\"exports\"] = m\nelse window.m = m\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../../../../usr/local/lib/~/webpack/~/timers-browserify/main.js */ 10).setImmediate, __webpack_require__(/*! ./../../../../../../../usr/local/lib/~/webpack/buildin/global.js */ 4)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/* unknown exports provided */
/* all exports used */
/*!***************************!*\
  !*** ./src/admin-menu.js ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var m = __webpack_require__(/*! mithril */ 1);\nvar stream = __webpack_require__(/*! mithril/stream */ 3);\nvar User = __webpack_require__(/*! ./models/user */ 0);\nvar AdminAppendUser = __webpack_require__(/*! ./admin-append-user */ 12);\n\nvar AdminMenu = {\n    view: function(vnode) {\n\treturn m(\"div\", [\n\t    m(AdminAppendUser),\n\t]);\n    },\n};\n\nmodule.exports = AdminMenu;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9hZG1pbi1tZW51LmpzP2NiNDciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG0gPSByZXF1aXJlKFwibWl0aHJpbFwiKTtcbnZhciBzdHJlYW0gPSByZXF1aXJlKFwibWl0aHJpbC9zdHJlYW1cIik7XG52YXIgVXNlciA9IHJlcXVpcmUoXCIuL21vZGVscy91c2VyXCIpO1xudmFyIEFkbWluQXBwZW5kVXNlciA9IHJlcXVpcmUoXCIuL2FkbWluLWFwcGVuZC11c2VyXCIpO1xuXG52YXIgQWRtaW5NZW51ID0ge1xuICAgIHZpZXc6IGZ1bmN0aW9uKHZub2RlKSB7XG5cdHJldHVybiBtKFwiZGl2XCIsIFtcblx0ICAgIG0oQWRtaW5BcHBlbmRVc2VyKSxcblx0XSk7XG4gICAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWRtaW5NZW51O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYWRtaW4tbWVudS5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 3 */
/* unknown exports provided */
/* all exports used */
/*!*****************************!*\
  !*** ./~/mithril/stream.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./stream/stream */ 7)//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vbWl0aHJpbC9zdHJlYW0uanM/NGI1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3N0cmVhbS9zdHJlYW1cIilcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWl0aHJpbC9zdHJlYW0uanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 4 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 5 */
/* unknown exports provided */
/* all exports used */
/*!**************************!*\
  !*** ./postman-admin.js ***!
  \**************************/
/***/ (function(module, exports) {

eval("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 10);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/* unknown exports provided */\n/* all exports used */\n/*!******************************!*\\\n  !*** ./~/mithril/mithril.js ***!\n  \\******************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"/* WEBPACK VAR INJECTION */(function(setImmediate, global) {new function() {\\n\\nfunction Vnode(tag, key, attrs0, children, text, dom) {\\n\\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: {}, events: undefined, instance: undefined, skip: false}\\n}\\nVnode.normalize = function(node) {\\n\\tif (Array.isArray(node)) return Vnode(\\\"[\\\", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\\n\\tif (node != null && typeof node !== \\\"object\\\") return Vnode(\\\"#\\\", undefined, undefined, node === false ? \\\"\\\" : node, undefined, undefined)\\n\\treturn node\\n}\\nVnode.normalizeChildren = function normalizeChildren(children) {\\n\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\tchildren[i] = Vnode.normalize(children[i])\\n\\t}\\n\\treturn children\\n}\\nvar selectorParser = /(?:(^|#|\\\\.)([^#\\\\.\\\\[\\\\]]+))|(\\\\[(.+?)(?:\\\\s*=\\\\s*(\\\"|'|)((?:\\\\\\\\[\\\"'\\\\]]|.)*?)\\\\5)?\\\\])/g\\nvar selectorCache = {}\\nfunction hyperscript(selector) {\\n\\tif (selector == null || typeof selector !== \\\"string\\\" && typeof selector.view !== \\\"function\\\") {\\n\\t\\tthrow Error(\\\"The selector must be either a string or a component.\\\");\\n\\t}\\n\\tif (typeof selector === \\\"string\\\" && selectorCache[selector] === undefined) {\\n\\t\\tvar match, tag, classes = [], attributes = {}\\n\\t\\twhile (match = selectorParser.exec(selector)) {\\n\\t\\t\\tvar type = match[1], value = match[2]\\n\\t\\t\\tif (type === \\\"\\\" && value !== \\\"\\\") tag = value\\n\\t\\t\\telse if (type === \\\"#\\\") attributes.id = value\\n\\t\\t\\telse if (type === \\\".\\\") classes.push(value)\\n\\t\\t\\telse if (match[3][0] === \\\"[\\\") {\\n\\t\\t\\t\\tvar attrValue = match[6]\\n\\t\\t\\t\\tif (attrValue) attrValue = attrValue.replace(/\\\\\\\\([\\\"'])/g, \\\"$1\\\").replace(/\\\\\\\\\\\\\\\\/g, \\\"\\\\\\\\\\\")\\n\\t\\t\\t\\tif (match[4] === \\\"class\\\") classes.push(attrValue)\\n\\t\\t\\t\\telse attributes[match[4]] = attrValue || true\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (classes.length > 0) attributes.className = classes.join(\\\" \\\")\\n\\t\\tselectorCache[selector] = function(attrs, children) {\\n\\t\\t\\tvar hasAttrs = false, childList, text\\n\\t\\t\\tvar className = attrs.className || attrs.class\\n\\t\\t\\tfor (var key in attributes) attrs[key] = attributes[key]\\n\\t\\t\\tif (className !== undefined) {\\n\\t\\t\\t\\tif (attrs.class !== undefined) {\\n\\t\\t\\t\\t\\tattrs.class = undefined\\n\\t\\t\\t\\t\\tattrs.className = className\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (attributes.className !== undefined) attrs.className = attributes.className + \\\" \\\" + className\\n\\t\\t\\t}\\n\\t\\t\\tfor (var key in attrs) {\\n\\t\\t\\t\\tif (key !== \\\"key\\\") {\\n\\t\\t\\t\\t\\thasAttrs = true\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (Array.isArray(children) && children.length == 1 && children[0] != null && children[0].tag === \\\"#\\\") text = children[0].children\\n\\t\\t\\telse childList = children\\n\\t\\t\\treturn Vnode(tag || \\\"div\\\", attrs.key, hasAttrs ? attrs : undefined, childList, text, undefined)\\n\\t\\t}\\n\\t}\\n\\tvar attrs, children, childrenIndex\\n\\tif (arguments[1] == null || typeof arguments[1] === \\\"object\\\" && arguments[1].tag === undefined && !Array.isArray(arguments[1])) {\\n\\t\\tattrs = arguments[1]\\n\\t\\tchildrenIndex = 2\\n\\t}\\n\\telse childrenIndex = 1\\n\\tif (arguments.length === childrenIndex + 1) {\\n\\t\\tchildren = Array.isArray(arguments[childrenIndex]) ? arguments[childrenIndex] : [arguments[childrenIndex]]\\n\\t}\\n\\telse {\\n\\t\\tchildren = []\\n\\t\\tfor (var i = childrenIndex; i < arguments.length; i++) children.push(arguments[i])\\n\\t}\\n\\tif (typeof selector === \\\"string\\\") return selectorCache[selector](attrs || {}, Vnode.normalizeChildren(children))\\n\\treturn Vnode(selector, attrs && attrs.key, attrs || {}, Vnode.normalizeChildren(children), undefined, undefined)\\n}\\nhyperscript.trust = function(html) {\\n\\tif (html == null) html = \\\"\\\"\\n\\treturn Vnode(\\\"<\\\", undefined, undefined, html, undefined, undefined)\\n}\\nhyperscript.fragment = function(attrs1, children) {\\n\\treturn Vnode(\\\"[\\\", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\\n}\\nvar m = hyperscript\\n/** @constructor */\\nvar PromisePolyfill = function(executor) {\\n\\tif (!(this instanceof PromisePolyfill)) throw new Error(\\\"Promise must be called with `new`\\\")\\n\\tif (typeof executor !== \\\"function\\\") throw new TypeError(\\\"executor must be a function\\\")\\n\\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\\n\\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\\n\\tvar callAsync = typeof setImmediate === \\\"function\\\" ? setImmediate : setTimeout\\n\\tfunction handler(list, shouldAbsorb) {\\n\\t\\treturn function execute(value) {\\n\\t\\t\\tvar then\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (shouldAbsorb && value != null && (typeof value === \\\"object\\\" || typeof value === \\\"function\\\") && typeof (then = value.then) === \\\"function\\\") {\\n\\t\\t\\t\\t\\tif (value === self) throw new TypeError(\\\"Promise can't be resolved w/ itself\\\")\\n\\t\\t\\t\\t\\texecuteOnce(then.bind(value))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tcallAsync(function() {\\n\\t\\t\\t\\t\\t\\tif (!shouldAbsorb && list.length === 0) console.error(\\\"Possible unhandled promise rejection:\\\", value)\\n\\t\\t\\t\\t\\t\\tfor (var i = 0; i < list.length; i++) list[i](value)\\n\\t\\t\\t\\t\\t\\tresolvers.length = 0, rejectors.length = 0\\n\\t\\t\\t\\t\\t\\tinstance.state = shouldAbsorb\\n\\t\\t\\t\\t\\t\\tinstance.retry = function() {execute(value)}\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tcatch (e) {\\n\\t\\t\\t\\trejectCurrent(e)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfunction executeOnce(then) {\\n\\t\\tvar runs = 0\\n\\t\\tfunction run(fn) {\\n\\t\\t\\treturn function(value) {\\n\\t\\t\\t\\tif (runs++ > 0) return\\n\\t\\t\\t\\tfn(value)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tvar onerror = run(rejectCurrent)\\n\\t\\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\\n\\t}\\n\\texecuteOnce(executor)\\n}\\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\\n\\tvar self = this, instance = self._instance\\n\\tfunction handle(callback, list, next, state) {\\n\\t\\tlist.push(function(value) {\\n\\t\\t\\tif (typeof callback !== \\\"function\\\") next(value)\\n\\t\\t\\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\\n\\t\\t})\\n\\t\\tif (typeof instance.retry === \\\"function\\\" && state === instance.state) instance.retry()\\n\\t}\\n\\tvar resolveNext, rejectNext\\n\\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\\n\\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\\n\\treturn promise\\n}\\nPromisePolyfill.prototype.catch = function(onRejection) {\\n\\treturn this.then(null, onRejection)\\n}\\nPromisePolyfill.resolve = function(value) {\\n\\tif (value instanceof PromisePolyfill) return value\\n\\treturn new PromisePolyfill(function(resolve) {resolve(value)})\\n}\\nPromisePolyfill.reject = function(value) {\\n\\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\\n}\\nPromisePolyfill.all = function(list) {\\n\\treturn new PromisePolyfill(function(resolve, reject) {\\n\\t\\tvar total = list.length, count = 0, values = []\\n\\t\\tif (list.length === 0) resolve([])\\n\\t\\telse for (var i = 0; i < list.length; i++) {\\n\\t\\t\\t(function(i) {\\n\\t\\t\\t\\tfunction consume(value) {\\n\\t\\t\\t\\t\\tcount++\\n\\t\\t\\t\\t\\tvalues[i] = value\\n\\t\\t\\t\\t\\tif (count === total) resolve(values)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (list[i] != null && (typeof list[i] === \\\"object\\\" || typeof list[i] === \\\"function\\\") && typeof list[i].then === \\\"function\\\") {\\n\\t\\t\\t\\t\\tlist[i].then(consume, reject)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse consume(list[i])\\n\\t\\t\\t})(i)\\n\\t\\t}\\n\\t})\\n}\\nPromisePolyfill.race = function(list) {\\n\\treturn new PromisePolyfill(function(resolve, reject) {\\n\\t\\tfor (var i = 0; i < list.length; i++) {\\n\\t\\t\\tlist[i].then(resolve, reject)\\n\\t\\t}\\n\\t})\\n}\\nif (typeof window !== \\\"undefined\\\") {\\n\\tif (typeof window.Promise === \\\"undefined\\\") window.Promise = PromisePolyfill\\n\\tvar PromisePolyfill = window.Promise\\n} else if (typeof global !== \\\"undefined\\\") {\\n\\tif (typeof global.Promise === \\\"undefined\\\") global.Promise = PromisePolyfill\\n\\tvar PromisePolyfill = global.Promise\\n} else {\\n}\\nvar buildQueryString = function(object) {\\n\\tif (Object.prototype.toString.call(object) !== \\\"[object Object]\\\") return \\\"\\\"\\n\\tvar args = []\\n\\tfor (var key0 in object) {\\n\\t\\tdestructure(key0, object[key0])\\n\\t}\\n\\treturn args.join(\\\"&\\\")\\n\\tfunction destructure(key0, value) {\\n\\t\\tif (Array.isArray(value)) {\\n\\t\\t\\tfor (var i = 0; i < value.length; i++) {\\n\\t\\t\\t\\tdestructure(key0 + \\\"[\\\" + i + \\\"]\\\", value[i])\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse if (Object.prototype.toString.call(value) === \\\"[object Object]\\\") {\\n\\t\\t\\tfor (var i in value) {\\n\\t\\t\\t\\tdestructure(key0 + \\\"[\\\" + i + \\\"]\\\", value[i])\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse args.push(encodeURIComponent(key0) + (value != null && value !== \\\"\\\" ? \\\"=\\\" + encodeURIComponent(value) : \\\"\\\"))\\n\\t}\\n}\\nvar _8 = function($window, Promise) {\\n\\tvar callbackCount = 0\\n\\tvar oncompletion\\n\\tfunction setCompletionCallback(callback) {oncompletion = callback}\\n\\tfunction finalizer() {\\n\\t\\tvar count = 0\\n\\t\\tfunction complete() {if (--count === 0 && typeof oncompletion === \\\"function\\\") oncompletion()}\\n\\t\\treturn function finalize(promise0) {\\n\\t\\t\\tvar then0 = promise0.then\\n\\t\\t\\tpromise0.then = function() {\\n\\t\\t\\t\\tcount++\\n\\t\\t\\t\\tvar next = then0.apply(promise0, arguments)\\n\\t\\t\\t\\tnext.then(complete, function(e) {\\n\\t\\t\\t\\t\\tcomplete()\\n\\t\\t\\t\\t\\tif (count === 0) throw e\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\treturn finalize(next)\\n\\t\\t\\t}\\n\\t\\t\\treturn promise0\\n\\t\\t}\\n\\t}\\n\\tfunction normalize(args, extra) {\\n\\t\\tif (typeof args === \\\"string\\\") {\\n\\t\\t\\tvar url = args\\n\\t\\t\\targs = extra || {}\\n\\t\\t\\tif (args.url == null) args.url = url\\n\\t\\t}\\n\\t\\treturn args\\n\\t}\\n\\tfunction request(args, extra) {\\n\\t\\tvar finalize = finalizer()\\n\\t\\targs = normalize(args, extra)\\n\\t\\tvar promise0 = new Promise(function(resolve, reject) {\\n\\t\\t\\tif (args.method == null) args.method = \\\"GET\\\"\\n\\t\\t\\targs.method = args.method.toUpperCase()\\n\\t\\t\\tvar useBody = typeof args.useBody === \\\"boolean\\\" ? args.useBody : args.method !== \\\"GET\\\" && args.method !== \\\"TRACE\\\"\\n\\t\\t\\tif (typeof args.serialize !== \\\"function\\\") args.serialize = typeof FormData !== \\\"undefined\\\" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\\n\\t\\t\\tif (typeof args.deserialize !== \\\"function\\\") args.deserialize = deserialize\\n\\t\\t\\tif (typeof args.extract !== \\\"function\\\") args.extract = extract\\n\\t\\t\\targs.url = interpolate(args.url, args.data)\\n\\t\\t\\tif (useBody) args.data = args.serialize(args.data)\\n\\t\\t\\telse args.url = assemble(args.url, args.data)\\n\\t\\t\\tvar xhr = new $window.XMLHttpRequest()\\n\\t\\t\\txhr.open(args.method, args.url, typeof args.async === \\\"boolean\\\" ? args.async : true, typeof args.user === \\\"string\\\" ? args.user : undefined, typeof args.password === \\\"string\\\" ? args.password : undefined)\\n\\t\\t\\tif (args.serialize === JSON.stringify && useBody) {\\n\\t\\t\\t\\txhr.setRequestHeader(\\\"Content-Type\\\", \\\"application/json; charset=utf-8\\\")\\n\\t\\t\\t}\\n\\t\\t\\tif (args.deserialize === deserialize) {\\n\\t\\t\\t\\txhr.setRequestHeader(\\\"Accept\\\", \\\"application/json, text/*\\\")\\n\\t\\t\\t}\\n\\t\\t\\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\\n\\t\\t\\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\\n\\t\\t\\t\\txhr.setRequestHeader(key, args.headers[key])\\n\\t\\t\\t}\\n\\t\\t\\tif (typeof args.config === \\\"function\\\") xhr = args.config(xhr, args) || xhr\\n\\t\\t\\txhr.onreadystatechange = function() {\\n\\t\\t\\t\\t// Don't throw errors on xhr.abort(). XMLHttpRequests ends up in a state of\\n\\t\\t\\t\\t// xhr.status == 0 and xhr.readyState == 4 if aborted after open, but before completion.\\n\\t\\t\\t\\tif (xhr.status && xhr.readyState === 4) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\\n\\t\\t\\t\\t\\t\\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\\n\\t\\t\\t\\t\\t\\t\\tresolve(cast(args.type, response))\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\tvar error = new Error(xhr.responseText)\\n\\t\\t\\t\\t\\t\\t\\tfor (var key in response) error[key] = response[key]\\n\\t\\t\\t\\t\\t\\t\\treject(error)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcatch (e) {\\n\\t\\t\\t\\t\\t\\treject(e)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (useBody && (args.data != null)) xhr.send(args.data)\\n\\t\\t\\telse xhr.send()\\n\\t\\t})\\n\\t\\treturn args.background === true ? promise0 : finalize(promise0)\\n\\t}\\n\\tfunction jsonp(args, extra) {\\n\\t\\tvar finalize = finalizer()\\n\\t\\targs = normalize(args, extra)\\n\\t\\tvar promise0 = new Promise(function(resolve, reject) {\\n\\t\\t\\tvar callbackName = args.callbackName || \\\"_mithril_\\\" + Math.round(Math.random() * 1e16) + \\\"_\\\" + callbackCount++\\n\\t\\t\\tvar script = $window.document.createElement(\\\"script\\\")\\n\\t\\t\\t$window[callbackName] = function(data) {\\n\\t\\t\\t\\tscript.parentNode.removeChild(script)\\n\\t\\t\\t\\tresolve(cast(args.type, data))\\n\\t\\t\\t\\tdelete $window[callbackName]\\n\\t\\t\\t}\\n\\t\\t\\tscript.onerror = function() {\\n\\t\\t\\t\\tscript.parentNode.removeChild(script)\\n\\t\\t\\t\\treject(new Error(\\\"JSONP request failed\\\"))\\n\\t\\t\\t\\tdelete $window[callbackName]\\n\\t\\t\\t}\\n\\t\\t\\tif (args.data == null) args.data = {}\\n\\t\\t\\targs.url = interpolate(args.url, args.data)\\n\\t\\t\\targs.data[args.callbackKey || \\\"callback\\\"] = callbackName\\n\\t\\t\\tscript.src = assemble(args.url, args.data)\\n\\t\\t\\t$window.document.documentElement.appendChild(script)\\n\\t\\t})\\n\\t\\treturn args.background === true? promise0 : finalize(promise0)\\n\\t}\\n\\tfunction interpolate(url, data) {\\n\\t\\tif (data == null) return url\\n\\t\\tvar tokens = url.match(/:[^\\\\/]+/gi) || []\\n\\t\\tfor (var i = 0; i < tokens.length; i++) {\\n\\t\\t\\tvar key = tokens[i].slice(1)\\n\\t\\t\\tif (data[key] != null) {\\n\\t\\t\\t\\turl = url.replace(tokens[i], data[key])\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn url\\n\\t}\\n\\tfunction assemble(url, data) {\\n\\t\\tvar querystring = buildQueryString(data)\\n\\t\\tif (querystring !== \\\"\\\") {\\n\\t\\t\\tvar prefix = url.indexOf(\\\"?\\\") < 0 ? \\\"?\\\" : \\\"&\\\"\\n\\t\\t\\turl += prefix + querystring\\n\\t\\t}\\n\\t\\treturn url\\n\\t}\\n\\tfunction deserialize(data) {\\n\\t\\ttry {return data !== \\\"\\\" ? JSON.parse(data) : null}\\n\\t\\tcatch (e) {throw new Error(data)}\\n\\t}\\n\\tfunction extract(xhr) {return xhr.responseText}\\n\\tfunction cast(type0, data) {\\n\\t\\tif (typeof type0 === \\\"function\\\") {\\n\\t\\t\\tif (Array.isArray(data)) {\\n\\t\\t\\t\\tfor (var i = 0; i < data.length; i++) {\\n\\t\\t\\t\\t\\tdata[i] = new type0(data[i])\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse return new type0(data)\\n\\t\\t}\\n\\t\\treturn data\\n\\t}\\n\\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\\n}\\nvar requestService = _8(window, PromisePolyfill)\\nvar coreRenderer = function($window) {\\n\\tvar $doc = $window.document\\n\\tvar $emptyFragment = $doc.createDocumentFragment()\\n\\tvar onevent\\n\\tfunction setEventCallback(callback) {return onevent = callback}\\n\\t//create\\n\\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\\n\\t\\tfor (var i = start; i < end; i++) {\\n\\t\\t\\tvar vnode = vnodes[i]\\n\\t\\t\\tif (vnode != null) {\\n\\t\\t\\t\\tcreateNode(parent, vnode, hooks, ns, nextSibling)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\\n\\t\\tvar tag = vnode.tag\\n\\t\\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\\n\\t\\tif (typeof tag === \\\"string\\\") {\\n\\t\\t\\tswitch (tag) {\\n\\t\\t\\t\\tcase \\\"#\\\": return createText(parent, vnode, nextSibling)\\n\\t\\t\\t\\tcase \\\"<\\\": return createHTML(parent, vnode, nextSibling)\\n\\t\\t\\t\\tcase \\\"[\\\": return createFragment(parent, vnode, hooks, ns, nextSibling)\\n\\t\\t\\t\\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\\n\\t}\\n\\tfunction createText(parent, vnode, nextSibling) {\\n\\t\\tvnode.dom = $doc.createTextNode(vnode.children)\\n\\t\\tinsertNode(parent, vnode.dom, nextSibling)\\n\\t\\treturn vnode.dom\\n\\t}\\n\\tfunction createHTML(parent, vnode, nextSibling) {\\n\\t\\tvar match1 = vnode.children.match(/^\\\\s*?<(\\\\w+)/im) || []\\n\\t\\tvar parent1 = {caption: \\\"table\\\", thead: \\\"table\\\", tbody: \\\"table\\\", tfoot: \\\"table\\\", tr: \\\"tbody\\\", th: \\\"tr\\\", td: \\\"tr\\\", colgroup: \\\"table\\\", col: \\\"colgroup\\\"}[match1[1]] || \\\"div\\\"\\n\\t\\tvar temp = $doc.createElement(parent1)\\n\\t\\ttemp.innerHTML = vnode.children\\n\\t\\tvnode.dom = temp.firstChild\\n\\t\\tvnode.domSize = temp.childNodes.length\\n\\t\\tvar fragment = $doc.createDocumentFragment()\\n\\t\\tvar child\\n\\t\\twhile (child = temp.firstChild) {\\n\\t\\t\\tfragment.appendChild(child)\\n\\t\\t}\\n\\t\\tinsertNode(parent, fragment, nextSibling)\\n\\t\\treturn fragment\\n\\t}\\n\\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\\n\\t\\tvar fragment = $doc.createDocumentFragment()\\n\\t\\tif (vnode.children != null) {\\n\\t\\t\\tvar children = vnode.children\\n\\t\\t\\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\\n\\t\\t}\\n\\t\\tvnode.dom = fragment.firstChild\\n\\t\\tvnode.domSize = fragment.childNodes.length\\n\\t\\tinsertNode(parent, fragment, nextSibling)\\n\\t\\treturn fragment\\n\\t}\\n\\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\\n\\t\\tvar tag = vnode.tag\\n\\t\\tswitch (vnode.tag) {\\n\\t\\t\\tcase \\\"svg\\\": ns = \\\"http://www.w3.org/2000/svg\\\"; break\\n\\t\\t\\tcase \\\"math\\\": ns = \\\"http://www.w3.org/1998/Math/MathML\\\"; break\\n\\t\\t}\\n\\t\\tvar attrs2 = vnode.attrs\\n\\t\\tvar is = attrs2 && attrs2.is\\n\\t\\tvar element = ns ?\\n\\t\\t\\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\\n\\t\\t\\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\\n\\t\\tvnode.dom = element\\n\\t\\tif (attrs2 != null) {\\n\\t\\t\\tsetAttrs(vnode, attrs2, ns)\\n\\t\\t}\\n\\t\\tinsertNode(parent, element, nextSibling)\\n\\t\\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\\n\\t\\t\\tsetContentEditable(vnode)\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (vnode.text != null) {\\n\\t\\t\\t\\tif (vnode.text !== \\\"\\\") element.textContent = vnode.text\\n\\t\\t\\t\\telse vnode.children = [Vnode(\\\"#\\\", undefined, undefined, vnode.text, undefined, undefined)]\\n\\t\\t\\t}\\n\\t\\t\\tif (vnode.children != null) {\\n\\t\\t\\t\\tvar children = vnode.children\\n\\t\\t\\t\\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\\n\\t\\t\\t\\tsetLateAttrs(vnode)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn element\\n\\t}\\n\\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\\n\\t\\tvnode.state = Object.create(vnode.tag)\\n\\t\\tvar view = vnode.tag.view\\n\\t\\tif (view.reentrantLock != null) return $emptyFragment\\n\\t\\tview.reentrantLock = true\\n\\t\\tinitLifecycle(vnode.tag, vnode, hooks)\\n\\t\\tvnode.instance = Vnode.normalize(view.call(vnode.state, vnode))\\n\\t\\tview.reentrantLock = null\\n\\t\\tif (vnode.instance != null) {\\n\\t\\t\\tif (vnode.instance === vnode) throw Error(\\\"A view cannot return the vnode it received as arguments\\\")\\n\\t\\t\\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\\n\\t\\t\\tvnode.dom = vnode.instance.dom\\n\\t\\t\\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\\n\\t\\t\\tinsertNode(parent, element, nextSibling)\\n\\t\\t\\treturn element\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tvnode.domSize = 0\\n\\t\\t\\treturn $emptyFragment\\n\\t\\t}\\n\\t}\\n\\t//update\\n\\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\\n\\t\\tif (old === vnodes || old == null && vnodes == null) return\\n\\t\\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, undefined)\\n\\t\\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\\n\\t\\telse {\\n\\t\\t\\tif (old.length === vnodes.length) {\\n\\t\\t\\t\\tvar isUnkeyed = false\\n\\t\\t\\t\\tfor (var i = 0; i < vnodes.length; i++) {\\n\\t\\t\\t\\t\\tif (vnodes[i] != null && old[i] != null) {\\n\\t\\t\\t\\t\\t\\tisUnkeyed = vnodes[i].key == null && old[i].key == null\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (isUnkeyed) {\\n\\t\\t\\t\\t\\tfor (var i = 0; i < old.length; i++) {\\n\\t\\t\\t\\t\\t\\tif (old[i] === vnodes[i]) continue\\n\\t\\t\\t\\t\\t\\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\\n\\t\\t\\t\\t\\t\\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\\n\\t\\t\\t\\t\\t\\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), false, ns)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\trecycling = recycling || isRecyclable(old, vnodes)\\n\\t\\t\\tif (recycling) old = old.concat(old.pool)\\n\\t\\t\\t\\n\\t\\t\\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\\n\\t\\t\\twhile (oldEnd >= oldStart && end >= start) {\\n\\t\\t\\t\\tvar o = old[oldStart], v = vnodes[start]\\n\\t\\t\\t\\tif (o === v && !recycling) oldStart++, start++\\n\\t\\t\\t\\telse if (o == null) oldStart++\\n\\t\\t\\t\\telse if (v == null) start++\\n\\t\\t\\t\\telse if (o.key === v.key) {\\n\\t\\t\\t\\t\\toldStart++, start++\\n\\t\\t\\t\\t\\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), recycling, ns)\\n\\t\\t\\t\\t\\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tvar o = old[oldEnd]\\n\\t\\t\\t\\t\\tif (o === v && !recycling) oldEnd--, start++\\n\\t\\t\\t\\t\\telse if (o == null) oldEnd--\\n\\t\\t\\t\\t\\telse if (v == null) start++\\n\\t\\t\\t\\t\\telse if (o.key === v.key) {\\n\\t\\t\\t\\t\\t\\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\\n\\t\\t\\t\\t\\t\\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\\n\\t\\t\\t\\t\\t\\toldEnd--, start++\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse break\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\twhile (oldEnd >= oldStart && end >= start) {\\n\\t\\t\\t\\tvar o = old[oldEnd], v = vnodes[end]\\n\\t\\t\\t\\tif (o === v && !recycling) oldEnd--, end--\\n\\t\\t\\t\\telse if (o == null) oldEnd--\\n\\t\\t\\t\\telse if (v == null) end--\\n\\t\\t\\t\\telse if (o.key === v.key) {\\n\\t\\t\\t\\t\\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\\n\\t\\t\\t\\t\\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\\n\\t\\t\\t\\t\\tif (o.dom != null) nextSibling = o.dom\\n\\t\\t\\t\\t\\toldEnd--, end--\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tif (!map) map = getKeyMap(old, oldEnd)\\n\\t\\t\\t\\t\\tif (v != null) {\\n\\t\\t\\t\\t\\t\\tvar oldIndex = map[v.key]\\n\\t\\t\\t\\t\\t\\tif (oldIndex != null) {\\n\\t\\t\\t\\t\\t\\t\\tvar movable = old[oldIndex]\\n\\t\\t\\t\\t\\t\\t\\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\\n\\t\\t\\t\\t\\t\\t\\tinsertNode(parent, toFragment(movable), nextSibling)\\n\\t\\t\\t\\t\\t\\t\\told[oldIndex].skip = true\\n\\t\\t\\t\\t\\t\\t\\tif (movable.dom != null) nextSibling = movable.dom\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\tvar dom = createNode(parent, v, hooks, undefined, nextSibling)\\n\\t\\t\\t\\t\\t\\t\\tnextSibling = dom\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tend--\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (end < start) break\\n\\t\\t\\t}\\n\\t\\t\\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\\n\\t\\t\\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\\n\\t\\t}\\n\\t}\\n\\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\\n\\t\\tvar oldTag = old.tag, tag = vnode.tag\\n\\t\\tif (oldTag === tag) {\\n\\t\\t\\tvnode.state = old.state\\n\\t\\t\\tvnode.events = old.events\\n\\t\\t\\tif (shouldUpdate(vnode, old)) return\\n\\t\\t\\tif (vnode.attrs != null) {\\n\\t\\t\\t\\tupdateLifecycle(vnode.attrs, vnode, hooks, recycling)\\n\\t\\t\\t}\\n\\t\\t\\tif (typeof oldTag === \\\"string\\\") {\\n\\t\\t\\t\\tswitch (oldTag) {\\n\\t\\t\\t\\t\\tcase \\\"#\\\": updateText(old, vnode); break\\n\\t\\t\\t\\t\\tcase \\\"<\\\": updateHTML(parent, old, vnode, nextSibling); break\\n\\t\\t\\t\\t\\tcase \\\"[\\\": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\\n\\t\\t\\t\\t\\tdefault: updateElement(old, vnode, recycling, hooks, ns)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tremoveNode(old, null)\\n\\t\\t\\tcreateNode(parent, vnode, hooks, ns, nextSibling)\\n\\t\\t}\\n\\t}\\n\\tfunction updateText(old, vnode) {\\n\\t\\tif (old.children.toString() !== vnode.children.toString()) {\\n\\t\\t\\told.dom.nodeValue = vnode.children\\n\\t\\t}\\n\\t\\tvnode.dom = old.dom\\n\\t}\\n\\tfunction updateHTML(parent, old, vnode, nextSibling) {\\n\\t\\tif (old.children !== vnode.children) {\\n\\t\\t\\ttoFragment(old)\\n\\t\\t\\tcreateHTML(parent, vnode, nextSibling)\\n\\t\\t}\\n\\t\\telse vnode.dom = old.dom, vnode.domSize = old.domSize\\n\\t}\\n\\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\\n\\t\\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\\n\\t\\tvar domSize = 0, children = vnode.children\\n\\t\\tvnode.dom = null\\n\\t\\tif (children != null) {\\n\\t\\t\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\t\\t\\tvar child = children[i]\\n\\t\\t\\t\\tif (child != null && child.dom != null) {\\n\\t\\t\\t\\t\\tif (vnode.dom == null) vnode.dom = child.dom\\n\\t\\t\\t\\t\\tdomSize += child.domSize || 1\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (domSize !== 1) vnode.domSize = domSize\\n\\t\\t}\\n\\t}\\n\\tfunction updateElement(old, vnode, recycling, hooks, ns) {\\n\\t\\tvar element = vnode.dom = old.dom\\n\\t\\tswitch (vnode.tag) {\\n\\t\\t\\tcase \\\"svg\\\": ns = \\\"http://www.w3.org/2000/svg\\\"; break\\n\\t\\t\\tcase \\\"math\\\": ns = \\\"http://www.w3.org/1998/Math/MathML\\\"; break\\n\\t\\t}\\n\\t\\tif (vnode.tag === \\\"textarea\\\") {\\n\\t\\t\\tif (vnode.attrs == null) vnode.attrs = {}\\n\\t\\t\\tif (vnode.text != null) {\\n\\t\\t\\t\\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\\n\\t\\t\\t\\tvnode.text = undefined\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\\n\\t\\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\\n\\t\\t\\tsetContentEditable(vnode)\\n\\t\\t}\\n\\t\\telse if (old.text != null && vnode.text != null && vnode.text !== \\\"\\\") {\\n\\t\\t\\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (old.text != null) old.children = [Vnode(\\\"#\\\", undefined, undefined, old.text, undefined, old.dom.firstChild)]\\n\\t\\t\\tif (vnode.text != null) vnode.children = [Vnode(\\\"#\\\", undefined, undefined, vnode.text, undefined, undefined)]\\n\\t\\t\\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\\n\\t\\t}\\n\\t}\\n\\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\\n\\t\\tvnode.instance = Vnode.normalize(vnode.tag.view.call(vnode.state, vnode))\\n\\t\\tupdateLifecycle(vnode.tag, vnode, hooks, recycling)\\n\\t\\tif (vnode.instance != null) {\\n\\t\\t\\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\\n\\t\\t\\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\\n\\t\\t\\tvnode.dom = vnode.instance.dom\\n\\t\\t\\tvnode.domSize = vnode.instance.domSize\\n\\t\\t}\\n\\t\\telse if (old.instance != null) {\\n\\t\\t\\tremoveNode(old.instance, null)\\n\\t\\t\\tvnode.dom = undefined\\n\\t\\t\\tvnode.domSize = 0\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tvnode.dom = old.dom\\n\\t\\t\\tvnode.domSize = old.domSize\\n\\t\\t}\\n\\t}\\n\\tfunction isRecyclable(old, vnodes) {\\n\\t\\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\\n\\t\\t\\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\\n\\t\\t\\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\\n\\t\\t\\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\\n\\t\\t\\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\\n\\t\\t\\t\\treturn true\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false\\n\\t}\\n\\tfunction getKeyMap(vnodes, end) {\\n\\t\\tvar map = {}, i = 0\\n\\t\\tfor (var i = 0; i < end; i++) {\\n\\t\\t\\tvar vnode = vnodes[i]\\n\\t\\t\\tif (vnode != null) {\\n\\t\\t\\t\\tvar key2 = vnode.key\\n\\t\\t\\t\\tif (key2 != null) map[key2] = i\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn map\\n\\t}\\n\\tfunction toFragment(vnode) {\\n\\t\\tvar count0 = vnode.domSize\\n\\t\\tif (count0 != null || vnode.dom == null) {\\n\\t\\t\\tvar fragment = $doc.createDocumentFragment()\\n\\t\\t\\tif (count0 > 0) {\\n\\t\\t\\t\\tvar dom = vnode.dom\\n\\t\\t\\t\\twhile (--count0) fragment.appendChild(dom.nextSibling)\\n\\t\\t\\t\\tfragment.insertBefore(dom, fragment.firstChild)\\n\\t\\t\\t}\\n\\t\\t\\treturn fragment\\n\\t\\t}\\n\\t\\telse return vnode.dom\\n\\t}\\n\\tfunction getNextSibling(vnodes, i, nextSibling) {\\n\\t\\tfor (; i < vnodes.length; i++) {\\n\\t\\t\\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\\n\\t\\t}\\n\\t\\treturn nextSibling\\n\\t}\\n\\tfunction insertNode(parent, dom, nextSibling) {\\n\\t\\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\\n\\t\\telse parent.appendChild(dom)\\n\\t}\\n\\tfunction setContentEditable(vnode) {\\n\\t\\tvar children = vnode.children\\n\\t\\tif (children != null && children.length === 1 && children[0].tag === \\\"<\\\") {\\n\\t\\t\\tvar content = children[0].children\\n\\t\\t\\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\\n\\t\\t}\\n\\t\\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error(\\\"Child node of a contenteditable must be trusted\\\")\\n\\t}\\n\\t//remove\\n\\tfunction removeNodes(vnodes, start, end, context) {\\n\\t\\tfor (var i = start; i < end; i++) {\\n\\t\\t\\tvar vnode = vnodes[i]\\n\\t\\t\\tif (vnode != null) {\\n\\t\\t\\t\\tif (vnode.skip) vnode.skip = false\\n\\t\\t\\t\\telse removeNode(vnode, context)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfunction removeNode(vnode, context) {\\n\\t\\tvar expected = 1, called = 0\\n\\t\\tif (vnode.attrs && vnode.attrs.onbeforeremove) {\\n\\t\\t\\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\\n\\t\\t\\tif (result != null && typeof result.then === \\\"function\\\") {\\n\\t\\t\\t\\texpected++\\n\\t\\t\\t\\tresult.then(continuation, continuation)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (typeof vnode.tag !== \\\"string\\\" && vnode.tag.onbeforeremove) {\\n\\t\\t\\tvar result = vnode.tag.onbeforeremove.call(vnode.state, vnode)\\n\\t\\t\\tif (result != null && typeof result.then === \\\"function\\\") {\\n\\t\\t\\t\\texpected++\\n\\t\\t\\t\\tresult.then(continuation, continuation)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcontinuation()\\n\\t\\tfunction continuation() {\\n\\t\\t\\tif (++called === expected) {\\n\\t\\t\\t\\tonremove(vnode)\\n\\t\\t\\t\\tif (vnode.dom) {\\n\\t\\t\\t\\t\\tvar count0 = vnode.domSize || 1\\n\\t\\t\\t\\t\\tif (count0 > 1) {\\n\\t\\t\\t\\t\\t\\tvar dom = vnode.dom\\n\\t\\t\\t\\t\\t\\twhile (--count0) {\\n\\t\\t\\t\\t\\t\\t\\tremoveNodeFromDOM(dom.nextSibling)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tremoveNodeFromDOM(vnode.dom)\\n\\t\\t\\t\\t\\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === \\\"string\\\") { //TODO test custom elements\\n\\t\\t\\t\\t\\t\\tif (!context.pool) context.pool = [vnode]\\n\\t\\t\\t\\t\\t\\telse context.pool.push(vnode)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfunction removeNodeFromDOM(node) {\\n\\t\\tvar parent = node.parentNode\\n\\t\\tif (parent != null) parent.removeChild(node)\\n\\t}\\n\\tfunction onremove(vnode) {\\n\\t\\tif (vnode.attrs && vnode.attrs.onremove) vnode.attrs.onremove.call(vnode.state, vnode)\\n\\t\\tif (typeof vnode.tag !== \\\"string\\\" && vnode.tag.onremove) vnode.tag.onremove.call(vnode.state, vnode)\\n\\t\\tif (vnode.instance != null) onremove(vnode.instance)\\n\\t\\telse {\\n\\t\\t\\tvar children = vnode.children\\n\\t\\t\\tif (Array.isArray(children)) {\\n\\t\\t\\t\\tfor (var i = 0; i < children.length; i++) {\\n\\t\\t\\t\\t\\tvar child = children[i]\\n\\t\\t\\t\\t\\tif (child != null) onremove(child)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//attrs2\\n\\tfunction setAttrs(vnode, attrs2, ns) {\\n\\t\\tfor (var key2 in attrs2) {\\n\\t\\t\\tsetAttr(vnode, key2, null, attrs2[key2], ns)\\n\\t\\t}\\n\\t}\\n\\tfunction setAttr(vnode, key2, old, value, ns) {\\n\\t\\tvar element = vnode.dom\\n\\t\\tif (key2 === \\\"key\\\" || key2 === \\\"is\\\" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== \\\"object\\\" || typeof value === \\\"undefined\\\" || isLifecycleMethod(key2)) return\\n\\t\\tvar nsLastIndex = key2.indexOf(\\\":\\\")\\n\\t\\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === \\\"xlink\\\") {\\n\\t\\t\\telement.setAttributeNS(\\\"http://www.w3.org/1999/xlink\\\", key2.slice(nsLastIndex + 1), value)\\n\\t\\t}\\n\\t\\telse if (key2[0] === \\\"o\\\" && key2[1] === \\\"n\\\" && typeof value === \\\"function\\\") updateEvent(vnode, key2, value)\\n\\t\\telse if (key2 === \\\"style\\\") updateStyle(element, old, value)\\n\\t\\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\\n\\t\\t\\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\\n\\t\\t\\tif (vnode.tag === \\\"input\\\" && key2 === \\\"value\\\" && vnode.dom.value === value && vnode.dom === $doc.activeElement) return\\n\\t\\t\\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\\n\\t\\t\\tif (vnode.tag === \\\"select\\\" && key2 === \\\"value\\\" && vnode.dom.value === value && vnode.dom === $doc.activeElement) return\\n\\t\\t\\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\\n\\t\\t\\tif (vnode.tag === \\\"option\\\" && key2 === \\\"value\\\" && vnode.dom.value === value) return\\n\\t\\t\\telement[key2] = value\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (typeof value === \\\"boolean\\\") {\\n\\t\\t\\t\\tif (value) element.setAttribute(key2, \\\"\\\")\\n\\t\\t\\t\\telse element.removeAttribute(key2)\\n\\t\\t\\t}\\n\\t\\t\\telse element.setAttribute(key2 === \\\"className\\\" ? \\\"class\\\" : key2, value)\\n\\t\\t}\\n\\t}\\n\\tfunction setLateAttrs(vnode) {\\n\\t\\tvar attrs2 = vnode.attrs\\n\\t\\tif (vnode.tag === \\\"select\\\" && attrs2 != null) {\\n\\t\\t\\tif (\\\"value\\\" in attrs2) setAttr(vnode, \\\"value\\\", null, attrs2.value, undefined)\\n\\t\\t\\tif (\\\"selectedIndex\\\" in attrs2) setAttr(vnode, \\\"selectedIndex\\\", null, attrs2.selectedIndex, undefined)\\n\\t\\t}\\n\\t}\\n\\tfunction updateAttrs(vnode, old, attrs2, ns) {\\n\\t\\tif (attrs2 != null) {\\n\\t\\t\\tfor (var key2 in attrs2) {\\n\\t\\t\\t\\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (old != null) {\\n\\t\\t\\tfor (var key2 in old) {\\n\\t\\t\\t\\tif (attrs2 == null || !(key2 in attrs2)) {\\n\\t\\t\\t\\t\\tif (key2 === \\\"className\\\") key2 = \\\"class\\\"\\n\\t\\t\\t\\t\\tif (key2[0] === \\\"o\\\" && key2[1] === \\\"n\\\" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\\n\\t\\t\\t\\t\\telse if (key2 !== \\\"key\\\") vnode.dom.removeAttribute(key2)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tfunction isFormAttribute(vnode, attr) {\\n\\t\\treturn attr === \\\"value\\\" || attr === \\\"checked\\\" || attr === \\\"selectedIndex\\\" || attr === \\\"selected\\\" && vnode.dom === $doc.activeElement\\n\\t}\\n\\tfunction isLifecycleMethod(attr) {\\n\\t\\treturn attr === \\\"oninit\\\" || attr === \\\"oncreate\\\" || attr === \\\"onupdate\\\" || attr === \\\"onremove\\\" || attr === \\\"onbeforeremove\\\" || attr === \\\"onbeforeupdate\\\"\\n\\t}\\n\\tfunction isAttribute(attr) {\\n\\t\\treturn attr === \\\"href\\\" || attr === \\\"list\\\" || attr === \\\"form\\\" || attr === \\\"width\\\" || attr === \\\"height\\\"// || attr === \\\"type\\\"\\n\\t}\\n\\tfunction isCustomElement(vnode){\\n\\t\\treturn vnode.attrs.is || vnode.tag.indexOf(\\\"-\\\") > -1\\n\\t}\\n\\tfunction hasIntegrationMethods(source) {\\n\\t\\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\\n\\t}\\n\\t//style\\n\\tfunction updateStyle(element, old, style) {\\n\\t\\tif (old === style) element.style.cssText = \\\"\\\", old = null\\n\\t\\tif (style == null) element.style.cssText = \\\"\\\"\\n\\t\\telse if (typeof style === \\\"string\\\") element.style.cssText = style\\n\\t\\telse {\\n\\t\\t\\tif (typeof old === \\\"string\\\") element.style.cssText = \\\"\\\"\\n\\t\\t\\tfor (var key2 in style) {\\n\\t\\t\\t\\telement.style[key2] = style[key2]\\n\\t\\t\\t}\\n\\t\\t\\tif (old != null && typeof old !== \\\"string\\\") {\\n\\t\\t\\t\\tfor (var key2 in old) {\\n\\t\\t\\t\\t\\tif (!(key2 in style)) element.style[key2] = \\\"\\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//event\\n\\tfunction updateEvent(vnode, key2, value) {\\n\\t\\tvar element = vnode.dom\\n\\t\\tvar callback = typeof onevent !== \\\"function\\\" ? value : function(e) {\\n\\t\\t\\tvar result = value.call(element, e)\\n\\t\\t\\tonevent.call(element, e)\\n\\t\\t\\treturn result\\n\\t\\t}\\n\\t\\tif (key2 in element) element[key2] = typeof value === \\\"function\\\" ? callback : null\\n\\t\\telse {\\n\\t\\t\\tvar eventName = key2.slice(2)\\n\\t\\t\\tif (vnode.events === undefined) vnode.events = {}\\n\\t\\t\\tif (vnode.events[key2] === callback) return\\n\\t\\t\\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\\n\\t\\t\\tif (typeof value === \\\"function\\\") {\\n\\t\\t\\t\\tvnode.events[key2] = callback\\n\\t\\t\\t\\telement.addEventListener(eventName, vnode.events[key2], false)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t//lifecycle\\n\\tfunction initLifecycle(source, vnode, hooks) {\\n\\t\\tif (typeof source.oninit === \\\"function\\\") source.oninit.call(vnode.state, vnode)\\n\\t\\tif (typeof source.oncreate === \\\"function\\\") hooks.push(source.oncreate.bind(vnode.state, vnode))\\n\\t}\\n\\tfunction updateLifecycle(source, vnode, hooks, recycling) {\\n\\t\\tif (recycling) initLifecycle(source, vnode, hooks)\\n\\t\\telse if (typeof source.onupdate === \\\"function\\\") hooks.push(source.onupdate.bind(vnode.state, vnode))\\n\\t}\\n\\tfunction shouldUpdate(vnode, old) {\\n\\t\\tvar forceVnodeUpdate, forceComponentUpdate\\n\\t\\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === \\\"function\\\") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\\n\\t\\tif (typeof vnode.tag !== \\\"string\\\" && typeof vnode.tag.onbeforeupdate === \\\"function\\\") forceComponentUpdate = vnode.tag.onbeforeupdate.call(vnode.state, vnode, old)\\n\\t\\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\\n\\t\\t\\tvnode.dom = old.dom\\n\\t\\t\\tvnode.domSize = old.domSize\\n\\t\\t\\tvnode.instance = old.instance\\n\\t\\t\\treturn true\\n\\t\\t}\\n\\t\\treturn false\\n\\t}\\n\\tfunction render(dom, vnodes) {\\n\\t\\tif (!dom) throw new Error(\\\"Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.\\\")\\n\\t\\tvar hooks = []\\n\\t\\tvar active = $doc.activeElement\\n\\t\\t// First time0 rendering into a node clears it out\\n\\t\\tif (dom.vnodes == null) dom.textContent = \\\"\\\"\\n\\t\\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\\n\\t\\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, undefined)\\n\\t\\tdom.vnodes = vnodes\\n\\t\\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\\n\\t\\tif ($doc.activeElement !== active) active.focus()\\n\\t}\\n\\treturn {render: render, setEventCallback: setEventCallback}\\n}\\nfunction throttle(callback) {\\n\\t//60fps translates to 16.6ms, round it down since setTimeout requires int\\n\\tvar time = 16\\n\\tvar last = 0, pending = null\\n\\tvar timeout = typeof requestAnimationFrame === \\\"function\\\" ? requestAnimationFrame : setTimeout\\n\\treturn function() {\\n\\t\\tvar now = Date.now()\\n\\t\\tif (last === 0 || now - last >= time) {\\n\\t\\t\\tlast = now\\n\\t\\t\\tcallback()\\n\\t\\t}\\n\\t\\telse if (pending === null) {\\n\\t\\t\\tpending = timeout(function() {\\n\\t\\t\\t\\tpending = null\\n\\t\\t\\t\\tcallback()\\n\\t\\t\\t\\tlast = Date.now()\\n\\t\\t\\t}, time - (now - last))\\n\\t\\t}\\n\\t}\\n}\\nvar _11 = function($window) {\\n\\tvar renderService = coreRenderer($window)\\n\\trenderService.setEventCallback(function(e) {\\n\\t\\tif (e.redraw !== false) redraw()\\n\\t})\\n\\tvar callbacks = []\\n\\tfunction subscribe(key1, callback) {\\n\\t\\tunsubscribe(key1)\\n\\t\\tcallbacks.push(key1, throttle(callback))\\n\\t}\\n\\tfunction unsubscribe(key1) {\\n\\t\\tvar index = callbacks.indexOf(key1)\\n\\t\\tif (index > -1) callbacks.splice(index, 2)\\n\\t}\\n    function redraw() {\\n        for (var i = 1; i < callbacks.length; i += 2) {\\n            callbacks[i]()\\n        }\\n    }\\n\\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\\n}\\nvar redrawService = _11(window)\\nrequestService.setCompletionCallback(redrawService.redraw)\\nvar _16 = function(redrawService0) {\\n\\treturn function(root, component) {\\n\\t\\tif (component === null) {\\n\\t\\t\\tredrawService0.render(root, [])\\n\\t\\t\\tredrawService0.unsubscribe(root)\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (component.view == null) throw new Error(\\\"m.mount(element, component) expects a component, not a vnode\\\")\\n\\t\\t\\n\\t\\tvar run0 = function() {\\n\\t\\t\\tredrawService0.render(root, Vnode(component))\\n\\t\\t}\\n\\t\\tredrawService0.subscribe(root, run0)\\n\\t\\tredrawService0.redraw()\\n\\t}\\n}\\nm.mount = _16(redrawService)\\nvar Promise = PromisePolyfill\\nvar parseQueryString = function(string) {\\n\\tif (string === \\\"\\\" || string == null) return {}\\n\\tif (string.charAt(0) === \\\"?\\\") string = string.slice(1)\\n\\tvar entries = string.split(\\\"&\\\"), data0 = {}, counters = {}\\n\\tfor (var i = 0; i < entries.length; i++) {\\n\\t\\tvar entry = entries[i].split(\\\"=\\\")\\n\\t\\tvar key5 = decodeURIComponent(entry[0])\\n\\t\\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : \\\"\\\"\\n\\t\\tif (value === \\\"true\\\") value = true\\n\\t\\telse if (value === \\\"false\\\") value = false\\n\\t\\tvar levels = key5.split(/\\\\]\\\\[?|\\\\[/)\\n\\t\\tvar cursor = data0\\n\\t\\tif (key5.indexOf(\\\"[\\\") > -1) levels.pop()\\n\\t\\tfor (var j = 0; j < levels.length; j++) {\\n\\t\\t\\tvar level = levels[j], nextLevel = levels[j + 1]\\n\\t\\t\\tvar isNumber = nextLevel == \\\"\\\" || !isNaN(parseInt(nextLevel, 10))\\n\\t\\t\\tvar isValue = j === levels.length - 1\\n\\t\\t\\tif (level === \\\"\\\") {\\n\\t\\t\\t\\tvar key5 = levels.slice(0, j).join()\\n\\t\\t\\t\\tif (counters[key5] == null) counters[key5] = 0\\n\\t\\t\\t\\tlevel = counters[key5]++\\n\\t\\t\\t}\\n\\t\\t\\tif (cursor[level] == null) {\\n\\t\\t\\t\\tcursor[level] = isValue ? value : isNumber ? [] : {}\\n\\t\\t\\t}\\n\\t\\t\\tcursor = cursor[level]\\n\\t\\t}\\n\\t}\\n\\treturn data0\\n}\\nvar coreRouter = function($window) {\\n\\tvar supportsPushState = typeof $window.history.pushState === \\\"function\\\"\\n\\tvar callAsync0 = typeof setImmediate === \\\"function\\\" ? setImmediate : setTimeout\\n\\tfunction normalize1(fragment0) {\\n\\t\\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\\n\\t\\tif (fragment0 === \\\"pathname\\\" && data[0] !== \\\"/\\\") data = \\\"/\\\" + data\\n\\t\\treturn data\\n\\t}\\n\\tvar asyncId\\n\\tfunction debounceAsync(callback0) {\\n\\t\\treturn function() {\\n\\t\\t\\tif (asyncId != null) return\\n\\t\\t\\tasyncId = callAsync0(function() {\\n\\t\\t\\t\\tasyncId = null\\n\\t\\t\\t\\tcallback0()\\n\\t\\t\\t})\\n\\t\\t}\\n\\t}\\n\\tfunction parsePath(path, queryData, hashData) {\\n\\t\\tvar queryIndex = path.indexOf(\\\"?\\\")\\n\\t\\tvar hashIndex = path.indexOf(\\\"#\\\")\\n\\t\\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\\n\\t\\tif (queryIndex > -1) {\\n\\t\\t\\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\\n\\t\\t\\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\\n\\t\\t\\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\\n\\t\\t}\\n\\t\\tif (hashIndex > -1) {\\n\\t\\t\\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\\n\\t\\t\\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\\n\\t\\t}\\n\\t\\treturn path.slice(0, pathEnd)\\n\\t}\\n\\tvar router = {prefix: \\\"#!\\\"}\\n\\trouter.getPath = function() {\\n\\t\\tvar type2 = router.prefix.charAt(0)\\n\\t\\tswitch (type2) {\\n\\t\\t\\tcase \\\"#\\\": return normalize1(\\\"hash\\\").slice(router.prefix.length)\\n\\t\\t\\tcase \\\"?\\\": return normalize1(\\\"search\\\").slice(router.prefix.length) + normalize1(\\\"hash\\\")\\n\\t\\t\\tdefault: return normalize1(\\\"pathname\\\").slice(router.prefix.length) + normalize1(\\\"search\\\") + normalize1(\\\"hash\\\")\\n\\t\\t}\\n\\t}\\n\\trouter.setPath = function(path, data, options) {\\n\\t\\tvar queryData = {}, hashData = {}\\n\\t\\tpath = parsePath(path, queryData, hashData)\\n\\t\\tif (data != null) {\\n\\t\\t\\tfor (var key4 in data) queryData[key4] = data[key4]\\n\\t\\t\\tpath = path.replace(/:([^\\\\/]+)/g, function(match2, token) {\\n\\t\\t\\t\\tdelete queryData[token]\\n\\t\\t\\t\\treturn data[token]\\n\\t\\t\\t})\\n\\t\\t}\\n\\t\\tvar query = buildQueryString(queryData)\\n\\t\\tif (query) path += \\\"?\\\" + query\\n\\t\\tvar hash = buildQueryString(hashData)\\n\\t\\tif (hash) path += \\\"#\\\" + hash\\n\\t\\tif (supportsPushState) {\\n\\t\\t\\tvar state = options ? options.state : null\\n\\t\\t\\tvar title = options ? options.title : null\\n\\t\\t\\t$window.onpopstate()\\n\\t\\t\\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\\n\\t\\t\\telse $window.history.pushState(state, title, router.prefix + path)\\n\\t\\t}\\n\\t\\telse $window.location.href = router.prefix + path\\n\\t}\\n\\trouter.defineRoutes = function(routes, resolve, reject) {\\n\\t\\tfunction resolveRoute() {\\n\\t\\t\\tvar path = router.getPath()\\n\\t\\t\\tvar params = {}\\n\\t\\t\\tvar pathname = parsePath(path, params, params)\\n\\t\\t\\tvar state = $window.history.state\\n\\t\\t\\tif (state != null) {\\n\\t\\t\\t\\tfor (var k in state) params[k] = state[k]\\n\\t\\t\\t}\\n\\t\\t\\tfor (var route0 in routes) {\\n\\t\\t\\t\\tvar matcher = new RegExp(\\\"^\\\" + route0.replace(/:[^\\\\/]+?\\\\.{3}/g, \\\"(.*?)\\\").replace(/:[^\\\\/]+/g, \\\"([^\\\\\\\\/]+)\\\") + \\\"\\\\/?$\\\")\\n\\t\\t\\t\\tif (matcher.test(pathname)) {\\n\\t\\t\\t\\t\\tpathname.replace(matcher, function() {\\n\\t\\t\\t\\t\\t\\tvar keys = route0.match(/:[^\\\\/]+/g) || []\\n\\t\\t\\t\\t\\t\\tvar values = [].slice.call(arguments, 1, -2)\\n\\t\\t\\t\\t\\t\\tfor (var i = 0; i < keys.length; i++) {\\n\\t\\t\\t\\t\\t\\t\\tparams[keys[i].replace(/:|\\\\./g, \\\"\\\")] = decodeURIComponent(values[i])\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tresolve(routes[route0], params, path, route0)\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\treturn\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treject(path, params)\\n\\t\\t}\\n\\t\\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\\n\\t\\telse if (router.prefix.charAt(0) === \\\"#\\\") $window.onhashchange = resolveRoute\\n\\t\\tresolveRoute()\\n\\t}\\n\\treturn router\\n}\\nvar _20 = function($window, redrawService0) {\\n\\tvar routeService = coreRouter($window)\\n\\tvar identity = function(v) {return v}\\n\\tvar render1, component, attrs3, currentPath, lastUpdate\\n\\tvar route = function(root, defaultRoute, routes) {\\n\\t\\tif (root == null) throw new Error(\\\"Ensure the DOM element that was passed to `m.route` is not undefined\\\")\\n\\t\\tvar run1 = function() {\\n\\t\\t\\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\\n\\t\\t}\\n\\t\\tvar bail = function(path) {\\n\\t\\t\\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\\n\\t\\t\\telse throw new Error(\\\"Could not resolve default route \\\" + defaultRoute)\\n\\t\\t}\\n\\t\\trouteService.defineRoutes(routes, function(payload, params, path) {\\n\\t\\t\\tvar update = lastUpdate = function(routeResolver, comp) {\\n\\t\\t\\t\\tif (update !== lastUpdate) return\\n\\t\\t\\t\\tcomponent = comp != null && typeof comp.view === \\\"function\\\" ? comp : \\\"div\\\", attrs3 = params, currentPath = path, lastUpdate = null\\n\\t\\t\\t\\trender1 = (routeResolver.render || identity).bind(routeResolver)\\n\\t\\t\\t\\trun1()\\n\\t\\t\\t}\\n\\t\\t\\tif (payload.view) update({}, payload)\\n\\t\\t\\telse {\\n\\t\\t\\t\\tif (payload.onmatch) {\\n\\t\\t\\t\\t\\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\\n\\t\\t\\t\\t\\t\\tupdate(payload, resolved)\\n\\t\\t\\t\\t\\t}, bail)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse update(payload, \\\"div\\\")\\n\\t\\t\\t}\\n\\t\\t}, bail)\\n\\t\\tredrawService0.subscribe(root, run1)\\n\\t}\\n\\troute.set = function(path, data, options) {\\n\\t\\tif (lastUpdate != null) options = {replace: true}\\n\\t\\tlastUpdate = null\\n\\t\\trouteService.setPath(path, data, options)\\n\\t}\\n\\troute.get = function() {return currentPath}\\n\\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\\n\\troute.link = function(vnode1) {\\n\\t\\tvnode1.dom.setAttribute(\\\"href\\\", routeService.prefix + vnode1.attrs.href)\\n\\t\\tvnode1.dom.onclick = function(e) {\\n\\t\\t\\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\\n\\t\\t\\te.preventDefault()\\n\\t\\t\\te.redraw = false\\n\\t\\t\\tvar href = this.getAttribute(\\\"href\\\")\\n\\t\\t\\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\\n\\t\\t\\troute.set(href, undefined, undefined)\\n\\t\\t}\\n\\t}\\n\\troute.param = function(key3) {\\n\\t\\tif(typeof attrs3 !== \\\"undefined\\\" && typeof key3 !== \\\"undefined\\\") return attrs3[key3]\\n\\t\\treturn attrs3\\n\\t}\\n\\treturn route\\n}\\nm.route = _20(window, redrawService)\\nm.withAttr = function(attrName, callback1, context) {\\n\\treturn function(e) {\\n\\t\\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\\n\\t}\\n}\\nvar _28 = coreRenderer(window)\\nm.render = _28.render\\nm.redraw = redrawService.redraw\\nm.request = requestService.request\\nm.jsonp = requestService.jsonp\\nm.parseQueryString = parseQueryString\\nm.buildQueryString = buildQueryString\\nm.version = \\\"1.0.1\\\"\\nm.vnode = Vnode\\nif (true) module[\\\"exports\\\"] = m\\nelse window.m = m\\n}\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../../../../../../usr/local/lib/~/webpack/~/timers-browserify/main.js */ 9).setImmediate, __webpack_require__(/*! ./../../../../../../../usr/local/lib/~/webpack/buildin/global.js */ 3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }),\n/* 1 */\n/* unknown exports provided */\n/* all exports used */\n/*!***************************!*\\\n  !*** ./src/admin-menu.js ***!\n  \\***************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"var m = __webpack_require__(/*! mithril */ 0);\\nvar stream = __webpack_require__(/*! mithril/stream */ 5);\\nvar User = __webpack_require__(/*! ./models/user */ 2);\\n\\nvar AdminMenu = {\\n    view: function(vnode) {\\n\\treturn m(\\\"div\\\", [\\n\\t]);\\n    },\\n};\\n\\nmodule.exports = AdminMenu;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9hZG1pbi1tZW51LmpzP2NiNDciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG0gPSByZXF1aXJlKFwibWl0aHJpbFwiKTtcbnZhciBzdHJlYW0gPSByZXF1aXJlKFwibWl0aHJpbC9zdHJlYW1cIik7XG52YXIgVXNlciA9IHJlcXVpcmUoXCIuL21vZGVscy91c2VyXCIpO1xuXG52YXIgQWRtaW5NZW51ID0ge1xuICAgIHZpZXc6IGZ1bmN0aW9uKHZub2RlKSB7XG5cdHJldHVybiBtKFwiZGl2XCIsIFtcblx0XSk7XG4gICAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWRtaW5NZW51O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYWRtaW4tbWVudS5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ }),\n/* 2 */\n/* unknown exports provided */\n/* all exports used */\n/*!****************************!*\\\n  !*** ./src/models/user.js ***!\n  \\****************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"var m = __webpack_require__(/*! mithril */ 0);\\nvar stream = __webpack_require__(/*! mithril/stream */ 5);\\n\\nfunction to_s(v) {\\n    if(v) {\\n\\treturn String(v);\\n    }\\n    else {\\n\\treturn \\\"\\\";\\n    }\\n}\\n\\nvar User = {\\n    id: stream(\\\"\\\"),\\n    username: stream(\\\"\\\"),\\n    my_address: stream(\\\"\\\"),\\n    forwarded: stream(\\\"\\\"),\\n    forward_address: stream(\\\"\\\"),\\n    currentPassword: stream(\\\"\\\"),\\n    currentPasswordStates: stream(\\\"none\\\"),\\n    newPassword: stream(\\\"\\\"),\\n    confirmationPassword: stream(\\\"\\\"),\\n    newPasswordStates: stream(\\\"none\\\"),\\n\\n    checkPassword: function(pw) {\\n\\tvar data = new FormData();\\n\\tdata.append(\\\"password\\\", pw);\\n\\tm.request({method: \\\"POST\\\",\\n\\t\\t   url: \\\"passwd/check\\\",\\n\\t\\t   serialize: function(data) {return data},\\n\\t\\t   data: data})\\n\\t    .then(function(data) {\\n\\t\\tif(data.result) {\\n\\t\\t    User.currentPasswordStates(\\\"valid\\\");\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t    User.currentPasswordStates(\\\"invalid\\\");\\n\\t\\t}\\n\\t    });\\n    },\\n    \\n    setCurrentPassword: function(value) {\\n\\tif(value.length > 0) {\\n\\t    User.checkPassword(value);\\n\\t}\\n\\telse {\\n\\t    User.currentPasswordStates(\\\"none\\\");\\n\\t}\\n    },\\n\\n    setNewPassword: function(value) {\\n\\tUser.newPassword(value);\\n\\tUser.checkNewPassword();\\n    },\\n\\n    setConfirmationPassword: function(value) {\\n\\tUser.confirmationPassword(value);\\n\\tUser.checkNewPassword();\\n    },\\n\\n    validatePassword: function() {\\n\\treturn (User.currentPasswordStates() == \\\"valid\\\"\\n\\t\\t&& User.newPasswordStates() == \\\"valid\\\");\\n    },\\n\\n    validateForward: function() {\\n\\tvar result = true;\\n\\tif(User.forwarded()) {\\n\\t    if(!User.forward_address().match(/^[A-Za-z0-9+_\\\\-.]+@[A-Za-z0-9+_\\\\-.]+$/)) {\\n\\t\\tresult = false;\\n\\t    }\\n\\t}\\n\\treturn result;\\n    },\\n\\n    checkNewPassword: function() {\\n\\tif(User.newPassword() != \\\"\\\") {\\n\\t    if(User.newPassword() == User.confirmationPassword()) {\\n\\t\\tUser.newPasswordStates(\\\"valid\\\");\\n\\t    }\\n\\t    else {\\n\\t\\tUser.newPasswordStates(\\\"invalid\\\");\\n\\t    }\\n\\t}\\n\\telse {\\n\\t    User.newPasswordStates(\\\"none\\\");\\n\\t}\\n    },\\n\\n    load: function() {\\n\\tm.request({method: \\\"GET\\\",\\n\\t\\t   url: \\\"info\\\",\\n\\t\\t   withCredentials: true})\\n\\t    .then(function(result) {\\n\\t\\tUser.id(result.id);\\n\\t\\tUser.username(result.username);\\n\\t\\tUser.my_address(result.my_address);\\n\\t\\tUser.forwarded(result.forwarded);\\n\\t\\tUser.forward_address(to_s(result.forward_address));\\n\\t    });\\n    },\\n    \\n    updatePassword: function(e) {\\n\\tvar data = new FormData();\\n\\tdata.append(\\\"new_password\\\", User.newPassword());\\n\\tm.request({method: \\\"POST\\\",\\n\\t\\t   url: \\\"passwd\\\",\\n\\t\\t   serialize: function(data) {return data},\\n\\t\\t   data: data})\\n\\t    .then(function(data) {\\n\\t\\tif(data.result) {\\n\\t\\t    alert(\\\"設定を更新しました。\\\");\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t    alert(\\\"設定の更新に失敗しました。\\\");\\n\\t\\t}\\n\\t    })\\n\\t    .catch(function(e) {\\n\\t\\talert(\\\"設定の更新に失敗しました。\\\\n\\\" + e)\\n\\t    });\\n    },\\n\\n    updateForward: function() {\\n\\tif(User.forwarded()) { // 転送設定\\n\\t    var data = new FormData();\\n\\t    data.append(\\\"forward_address\\\", User.forward_address());\\n\\t    m.request({method: \\\"POST\\\",\\n\\t\\t       url: \\\"forward\\\",\\n\\t\\t       serialize: function(data) {return data},\\n\\t\\t       data: data})\\n\\t\\t.then(function(data) {\\n\\t\\t    alert(\\\"設定を更新しました。\\\");\\n\\t\\t})\\n\\t\\t.catch(function(e) {\\n\\t\\t    alert(\\\"設定の更新に失敗しました。\\\\n\\\" + e);\\n\\t\\t});\\n\\t}\\n\\telse { // 転送解除\\n\\t    m.request({method: \\\"POST\\\",\\n\\t\\t       url: \\\"forward/disable\\\",\\n\\t\\t       withCredentials: true})\\n\\t\\t.then(function(data) {\\n\\t\\t    alert(\\\"設定を更新しました。\\\");\\n\\t\\t})\\n\\t\\t.catch(function(e) {\\n\\t\\t    alert(\\\"設定の更新に失敗しました。\\\\n\\\" + e);\\n\\t\\t});\\n\\t}\\n    }\\n};\\n\\nUser.create = function(username, password) {\\n    var data = new FormData();\\n    data.append(\\\"username\\\", username);\\n    data.append(\\\"password\\\", password);\\n    m.request({method: \\\"POST\\\",\\n\\t       url: \\\"user\\\",\\n\\t       serialize: function(data) { return data; },\\n\\t       data: data});\\n};\\n\\nmodule.exports = User;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tb2RlbHMvdXNlci5qcz9mZmI2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBtID0gcmVxdWlyZShcIm1pdGhyaWxcIik7XG52YXIgc3RyZWFtID0gcmVxdWlyZShcIm1pdGhyaWwvc3RyZWFtXCIpO1xuXG5mdW5jdGlvbiB0b19zKHYpIHtcbiAgICBpZih2KSB7XG5cdHJldHVybiBTdHJpbmcodik7XG4gICAgfVxuICAgIGVsc2Uge1xuXHRyZXR1cm4gXCJcIjtcbiAgICB9XG59XG5cbnZhciBVc2VyID0ge1xuICAgIGlkOiBzdHJlYW0oXCJcIiksXG4gICAgdXNlcm5hbWU6IHN0cmVhbShcIlwiKSxcbiAgICBteV9hZGRyZXNzOiBzdHJlYW0oXCJcIiksXG4gICAgZm9yd2FyZGVkOiBzdHJlYW0oXCJcIiksXG4gICAgZm9yd2FyZF9hZGRyZXNzOiBzdHJlYW0oXCJcIiksXG4gICAgY3VycmVudFBhc3N3b3JkOiBzdHJlYW0oXCJcIiksXG4gICAgY3VycmVudFBhc3N3b3JkU3RhdGVzOiBzdHJlYW0oXCJub25lXCIpLFxuICAgIG5ld1Bhc3N3b3JkOiBzdHJlYW0oXCJcIiksXG4gICAgY29uZmlybWF0aW9uUGFzc3dvcmQ6IHN0cmVhbShcIlwiKSxcbiAgICBuZXdQYXNzd29yZFN0YXRlczogc3RyZWFtKFwibm9uZVwiKSxcblxuICAgIGNoZWNrUGFzc3dvcmQ6IGZ1bmN0aW9uKHB3KSB7XG5cdHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cdGRhdGEuYXBwZW5kKFwicGFzc3dvcmRcIiwgcHcpO1xuXHRtLnJlcXVlc3Qoe21ldGhvZDogXCJQT1NUXCIsXG5cdFx0ICAgdXJsOiBcInBhc3N3ZC9jaGVja1wiLFxuXHRcdCAgIHNlcmlhbGl6ZTogZnVuY3Rpb24oZGF0YSkge3JldHVybiBkYXRhfSxcblx0XHQgICBkYXRhOiBkYXRhfSlcblx0ICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRpZihkYXRhLnJlc3VsdCkge1xuXHRcdCAgICBVc2VyLmN1cnJlbnRQYXNzd29yZFN0YXRlcyhcInZhbGlkXCIpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHQgICAgVXNlci5jdXJyZW50UGFzc3dvcmRTdGF0ZXMoXCJpbnZhbGlkXCIpO1xuXHRcdH1cblx0ICAgIH0pO1xuICAgIH0sXG4gICAgXG4gICAgc2V0Q3VycmVudFBhc3N3b3JkOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRpZih2YWx1ZS5sZW5ndGggPiAwKSB7XG5cdCAgICBVc2VyLmNoZWNrUGFzc3dvcmQodmFsdWUpO1xuXHR9XG5cdGVsc2Uge1xuXHQgICAgVXNlci5jdXJyZW50UGFzc3dvcmRTdGF0ZXMoXCJub25lXCIpO1xuXHR9XG4gICAgfSxcblxuICAgIHNldE5ld1Bhc3N3b3JkOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRVc2VyLm5ld1Bhc3N3b3JkKHZhbHVlKTtcblx0VXNlci5jaGVja05ld1Bhc3N3b3JkKCk7XG4gICAgfSxcblxuICAgIHNldENvbmZpcm1hdGlvblBhc3N3b3JkOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRVc2VyLmNvbmZpcm1hdGlvblBhc3N3b3JkKHZhbHVlKTtcblx0VXNlci5jaGVja05ld1Bhc3N3b3JkKCk7XG4gICAgfSxcblxuICAgIHZhbGlkYXRlUGFzc3dvcmQ6IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gKFVzZXIuY3VycmVudFBhc3N3b3JkU3RhdGVzKCkgPT0gXCJ2YWxpZFwiXG5cdFx0JiYgVXNlci5uZXdQYXNzd29yZFN0YXRlcygpID09IFwidmFsaWRcIik7XG4gICAgfSxcblxuICAgIHZhbGlkYXRlRm9yd2FyZDogZnVuY3Rpb24oKSB7XG5cdHZhciByZXN1bHQgPSB0cnVlO1xuXHRpZihVc2VyLmZvcndhcmRlZCgpKSB7XG5cdCAgICBpZighVXNlci5mb3J3YXJkX2FkZHJlc3MoKS5tYXRjaCgvXltBLVphLXowLTkrX1xcLS5dK0BbQS1aYS16MC05K19cXC0uXSskLykpIHtcblx0XHRyZXN1bHQgPSBmYWxzZTtcblx0ICAgIH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBjaGVja05ld1Bhc3N3b3JkOiBmdW5jdGlvbigpIHtcblx0aWYoVXNlci5uZXdQYXNzd29yZCgpICE9IFwiXCIpIHtcblx0ICAgIGlmKFVzZXIubmV3UGFzc3dvcmQoKSA9PSBVc2VyLmNvbmZpcm1hdGlvblBhc3N3b3JkKCkpIHtcblx0XHRVc2VyLm5ld1Bhc3N3b3JkU3RhdGVzKFwidmFsaWRcIik7XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0XHRVc2VyLm5ld1Bhc3N3b3JkU3RhdGVzKFwiaW52YWxpZFwiKTtcblx0ICAgIH1cblx0fVxuXHRlbHNlIHtcblx0ICAgIFVzZXIubmV3UGFzc3dvcmRTdGF0ZXMoXCJub25lXCIpO1xuXHR9XG4gICAgfSxcblxuICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuXHRtLnJlcXVlc3Qoe21ldGhvZDogXCJHRVRcIixcblx0XHQgICB1cmw6IFwiaW5mb1wiLFxuXHRcdCAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZX0pXG5cdCAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcblx0XHRVc2VyLmlkKHJlc3VsdC5pZCk7XG5cdFx0VXNlci51c2VybmFtZShyZXN1bHQudXNlcm5hbWUpO1xuXHRcdFVzZXIubXlfYWRkcmVzcyhyZXN1bHQubXlfYWRkcmVzcyk7XG5cdFx0VXNlci5mb3J3YXJkZWQocmVzdWx0LmZvcndhcmRlZCk7XG5cdFx0VXNlci5mb3J3YXJkX2FkZHJlc3ModG9fcyhyZXN1bHQuZm9yd2FyZF9hZGRyZXNzKSk7XG5cdCAgICB9KTtcbiAgICB9LFxuICAgIFxuICAgIHVwZGF0ZVBhc3N3b3JkOiBmdW5jdGlvbihlKSB7XG5cdHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cdGRhdGEuYXBwZW5kKFwibmV3X3Bhc3N3b3JkXCIsIFVzZXIubmV3UGFzc3dvcmQoKSk7XG5cdG0ucmVxdWVzdCh7bWV0aG9kOiBcIlBPU1RcIixcblx0XHQgICB1cmw6IFwicGFzc3dkXCIsXG5cdFx0ICAgc2VyaWFsaXplOiBmdW5jdGlvbihkYXRhKSB7cmV0dXJuIGRhdGF9LFxuXHRcdCAgIGRhdGE6IGRhdGF9KVxuXHQgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuXHRcdGlmKGRhdGEucmVzdWx0KSB7XG5cdFx0ICAgIGFsZXJ0KFwi6Kit5a6a44KS5pu05paw44GX44G+44GX44Gf44CCXCIpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHQgICAgYWxlcnQoXCLoqK3lrprjga7mm7TmlrDjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgIJcIik7XG5cdFx0fVxuXHQgICAgfSlcblx0ICAgIC5jYXRjaChmdW5jdGlvbihlKSB7XG5cdFx0YWxlcnQoXCLoqK3lrprjga7mm7TmlrDjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgIJcXG5cIiArIGUpXG5cdCAgICB9KTtcbiAgICB9LFxuXG4gICAgdXBkYXRlRm9yd2FyZDogZnVuY3Rpb24oKSB7XG5cdGlmKFVzZXIuZm9yd2FyZGVkKCkpIHsgLy8g6Lui6YCB6Kit5a6aXG5cdCAgICB2YXIgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXHQgICAgZGF0YS5hcHBlbmQoXCJmb3J3YXJkX2FkZHJlc3NcIiwgVXNlci5mb3J3YXJkX2FkZHJlc3MoKSk7XG5cdCAgICBtLnJlcXVlc3Qoe21ldGhvZDogXCJQT1NUXCIsXG5cdFx0ICAgICAgIHVybDogXCJmb3J3YXJkXCIsXG5cdFx0ICAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24oZGF0YSkge3JldHVybiBkYXRhfSxcblx0XHQgICAgICAgZGF0YTogZGF0YX0pXG5cdFx0LnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuXHRcdCAgICBhbGVydChcIuioreWumuOCkuabtOaWsOOBl+OBvuOBl+OBn+OAglwiKTtcblx0XHR9KVxuXHRcdC5jYXRjaChmdW5jdGlvbihlKSB7XG5cdFx0ICAgIGFsZXJ0KFwi6Kit5a6a44Gu5pu05paw44Gr5aSx5pWX44GX44G+44GX44Gf44CCXFxuXCIgKyBlKTtcblx0XHR9KTtcblx0fVxuXHRlbHNlIHsgLy8g6Lui6YCB6Kej6ZmkXG5cdCAgICBtLnJlcXVlc3Qoe21ldGhvZDogXCJQT1NUXCIsXG5cdFx0ICAgICAgIHVybDogXCJmb3J3YXJkL2Rpc2FibGVcIixcblx0XHQgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlfSlcblx0XHQudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cdFx0ICAgIGFsZXJ0KFwi6Kit5a6a44KS5pu05paw44GX44G+44GX44Gf44CCXCIpO1xuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uKGUpIHtcblx0XHQgICAgYWxlcnQoXCLoqK3lrprjga7mm7TmlrDjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgIJcXG5cIiArIGUpO1xuXHRcdH0pO1xuXHR9XG4gICAgfVxufTtcblxuVXNlci5jcmVhdGUgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICB2YXIgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGRhdGEuYXBwZW5kKFwidXNlcm5hbWVcIiwgdXNlcm5hbWUpO1xuICAgIGRhdGEuYXBwZW5kKFwicGFzc3dvcmRcIiwgcGFzc3dvcmQpO1xuICAgIG0ucmVxdWVzdCh7bWV0aG9kOiBcIlBPU1RcIixcblx0ICAgICAgIHVybDogXCJ1c2VyXCIsXG5cdCAgICAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKGRhdGEpIHsgcmV0dXJuIGRhdGE7IH0sXG5cdCAgICAgICBkYXRhOiBkYXRhfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9tb2RlbHMvdXNlci5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ }),\n/* 3 */\n/* unknown exports provided */\n/* all exports used */\n/*!***********************************!*\\\n  !*** (webpack)/buildin/global.js ***!\n  \\***********************************/\n/***/ (function(module, exports) {\n\neval(\"var g;\\r\\n\\r\\n// This works in non-strict mode\\r\\ng = (function() {\\r\\n\\treturn this;\\r\\n})();\\r\\n\\r\\ntry {\\r\\n\\t// This works if eval is allowed (see CSP)\\r\\n\\tg = g || Function(\\\"return this\\\")() || (1,eval)(\\\"this\\\");\\r\\n} catch(e) {\\r\\n\\t// This works if the window reference is available\\r\\n\\tif(typeof window === \\\"object\\\")\\r\\n\\t\\tg = window;\\r\\n}\\r\\n\\r\\n// g can still be undefined, but nothing to do about it...\\r\\n// We return undefined, instead of nothing here, so it's\\r\\n// easier to handle this case. if(!global) { ...}\\r\\n\\r\\nmodule.exports = g;\\r\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ }),\n/* 4 */\n/* unknown exports provided */\n/* all exports used */\n/*!**********************************!*\\\n  !*** ./src/postman-admin-app.js ***!\n  \\**********************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"var m = __webpack_require__(/*! mithril */ 0);\\nvar User = __webpack_require__(/*! ./models/user */ 2);\\nvar AdminMenu = __webpack_require__(/*! ./admin-menu */ 1);\\n\\nvar root = document.getElementById(\\\"root\\\");\\nm.route(root, \\\"/admin-menu\\\", {\\n    \\\"/admin-menu\\\": AdminMenu,\\n});\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9wb3N0bWFuLWFkbWluLWFwcC5qcz85NGRmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBtID0gcmVxdWlyZShcIm1pdGhyaWxcIik7XG52YXIgVXNlciA9IHJlcXVpcmUoXCIuL21vZGVscy91c2VyXCIpO1xudmFyIEFkbWluTWVudSA9IHJlcXVpcmUoXCIuL2FkbWluLW1lbnVcIik7XG5cbnZhciByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpO1xubS5yb3V0ZShyb290LCBcIi9hZG1pbi1tZW51XCIsIHtcbiAgICBcIi9hZG1pbi1tZW51XCI6IEFkbWluTWVudSxcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcG9zdG1hbi1hZG1pbi1hcHAuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ }),\n/* 5 */\n/* unknown exports provided */\n/* all exports used */\n/*!*****************************!*\\\n  !*** ./~/mithril/stream.js ***!\n  \\*****************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"module.exports = __webpack_require__(/*! ./stream/stream */ 6)//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vbWl0aHJpbC9zdHJlYW0uanM/NGI1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3N0cmVhbS9zdHJlYW1cIilcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWl0aHJpbC9zdHJlYW0uanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ }),\n/* 6 */\n/* unknown exports provided */\n/* all exports used */\n/*!************************************!*\\\n  !*** ./~/mithril/stream/stream.js ***!\n  \\************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nvar guid = 0, HALT = {}\\nfunction createStream() {\\n\\tfunction stream() {\\n\\t\\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\\n\\t\\treturn stream._state.value\\n\\t}\\n\\tinitStream(stream)\\n\\n\\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\\n\\n\\treturn stream\\n}\\nfunction initStream(stream) {\\n\\tstream.constructor = createStream\\n\\tstream._state = {id: guid++, value: undefined, state: 0, derive: undefined, recover: undefined, deps: {}, parents: [], endStream: undefined}\\n\\tstream.map = stream[\\\"fantasy-land/map\\\"] = map, stream[\\\"fantasy-land/ap\\\"] = ap, stream[\\\"fantasy-land/of\\\"] = createStream\\n\\tstream.valueOf = valueOf, stream.toJSON = toJSON, stream.toString = valueOf\\n\\n\\tObject.defineProperties(stream, {\\n\\t\\tend: {get: function() {\\n\\t\\t\\tif (!stream._state.endStream) {\\n\\t\\t\\t\\tvar endStream = createStream()\\n\\t\\t\\t\\tendStream.map(function(value) {\\n\\t\\t\\t\\t\\tif (value === true) unregisterStream(stream), unregisterStream(endStream)\\n\\t\\t\\t\\t\\treturn value\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\tstream._state.endStream = endStream\\n\\t\\t\\t}\\n\\t\\t\\treturn stream._state.endStream\\n\\t\\t}}\\n\\t})\\n}\\nfunction updateStream(stream, value) {\\n\\tupdateState(stream, value)\\n\\tfor (var id in stream._state.deps) updateDependency(stream._state.deps[id], false)\\n\\tfinalize(stream)\\n}\\nfunction updateState(stream, value) {\\n\\tstream._state.value = value\\n\\tstream._state.changed = true\\n\\tif (stream._state.state !== 2) stream._state.state = 1\\n}\\nfunction updateDependency(stream, mustSync) {\\n\\tvar state = stream._state, parents = state.parents\\n\\tif (parents.length > 0 && parents.every(active) && (mustSync || parents.some(changed))) {\\n\\t\\tvar value = stream._state.derive()\\n\\t\\tif (value === HALT) return false\\n\\t\\tupdateState(stream, value)\\n\\t}\\n}\\nfunction finalize(stream) {\\n\\tstream._state.changed = false\\n\\tfor (var id in stream._state.deps) stream._state.deps[id]._state.changed = false\\n}\\n\\nfunction combine(fn, streams) {\\n\\tif (!streams.every(valid)) throw new Error(\\\"Ensure that each item passed to m.prop.combine/m.prop.merge is a stream\\\")\\n\\treturn initDependency(createStream(), streams, function() {\\n\\t\\treturn fn.apply(this, streams.concat([streams.filter(changed)]))\\n\\t})\\n}\\n\\nfunction initDependency(dep, streams, derive) {\\n\\tvar state = dep._state\\n\\tstate.derive = derive\\n\\tstate.parents = streams.filter(notEnded)\\n\\n\\tregisterDependency(dep, state.parents)\\n\\tupdateDependency(dep, true)\\n\\n\\treturn dep\\n}\\nfunction registerDependency(stream, parents) {\\n\\tfor (var i = 0; i < parents.length; i++) {\\n\\t\\tparents[i]._state.deps[stream._state.id] = stream\\n\\t\\tregisterDependency(stream, parents[i]._state.parents)\\n\\t}\\n}\\nfunction unregisterStream(stream) {\\n\\tfor (var i = 0; i < stream._state.parents.length; i++) {\\n\\t\\tvar parent = stream._state.parents[i]\\n\\t\\tdelete parent._state.deps[stream._state.id]\\n\\t}\\n\\tfor (var id in stream._state.deps) {\\n\\t\\tvar dependent = stream._state.deps[id]\\n\\t\\tvar index = dependent._state.parents.indexOf(stream)\\n\\t\\tif (index > -1) dependent._state.parents.splice(index, 1)\\n\\t}\\n\\tstream._state.state = 2 //ended\\n\\tstream._state.deps = {}\\n}\\n\\nfunction map(fn) {return combine(function(stream) {return fn(stream())}, [this])}\\nfunction ap(stream) {return combine(function(s1, s2) {return s1()(s2())}, [stream, this])}\\nfunction valueOf() {return this._state.value}\\nfunction toJSON() {return this._state.value != null && typeof this._state.value.toJSON === \\\"function\\\" ? this._state.value.toJSON() : this._state.value}\\n\\nfunction valid(stream) {return stream._state }\\nfunction active(stream) {return stream._state.state === 1}\\nfunction changed(stream) {return stream._state.changed}\\nfunction notEnded(stream) {return stream._state.state !== 2}\\n\\nfunction merge(streams) {\\n\\treturn combine(function() {\\n\\t\\treturn streams.map(function(s) {return s()})\\n\\t}, streams)\\n}\\ncreateStream[\\\"fantasy-land/of\\\"] = createStream\\ncreateStream.merge = merge\\ncreateStream.combine = combine\\ncreateStream.HALT = HALT\\n\\nif (true) module[\\\"exports\\\"] = createStream\\nelse window.stream = createStream\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vbWl0aHJpbC9zdHJlYW0vc3RyZWFtLmpzPzAwZWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIGd1aWQgPSAwLCBIQUxUID0ge31cbmZ1bmN0aW9uIGNyZWF0ZVN0cmVhbSgpIHtcblx0ZnVuY3Rpb24gc3RyZWFtKCkge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IEhBTFQpIHVwZGF0ZVN0cmVhbShzdHJlYW0sIGFyZ3VtZW50c1swXSlcblx0XHRyZXR1cm4gc3RyZWFtLl9zdGF0ZS52YWx1ZVxuXHR9XG5cdGluaXRTdHJlYW0oc3RyZWFtKVxuXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IEhBTFQpIHVwZGF0ZVN0cmVhbShzdHJlYW0sIGFyZ3VtZW50c1swXSlcblxuXHRyZXR1cm4gc3RyZWFtXG59XG5mdW5jdGlvbiBpbml0U3RyZWFtKHN0cmVhbSkge1xuXHRzdHJlYW0uY29uc3RydWN0b3IgPSBjcmVhdGVTdHJlYW1cblx0c3RyZWFtLl9zdGF0ZSA9IHtpZDogZ3VpZCsrLCB2YWx1ZTogdW5kZWZpbmVkLCBzdGF0ZTogMCwgZGVyaXZlOiB1bmRlZmluZWQsIHJlY292ZXI6IHVuZGVmaW5lZCwgZGVwczoge30sIHBhcmVudHM6IFtdLCBlbmRTdHJlYW06IHVuZGVmaW5lZH1cblx0c3RyZWFtLm1hcCA9IHN0cmVhbVtcImZhbnRhc3ktbGFuZC9tYXBcIl0gPSBtYXAsIHN0cmVhbVtcImZhbnRhc3ktbGFuZC9hcFwiXSA9IGFwLCBzdHJlYW1bXCJmYW50YXN5LWxhbmQvb2ZcIl0gPSBjcmVhdGVTdHJlYW1cblx0c3RyZWFtLnZhbHVlT2YgPSB2YWx1ZU9mLCBzdHJlYW0udG9KU09OID0gdG9KU09OLCBzdHJlYW0udG9TdHJpbmcgPSB2YWx1ZU9mXG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyZWFtLCB7XG5cdFx0ZW5kOiB7Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICghc3RyZWFtLl9zdGF0ZS5lbmRTdHJlYW0pIHtcblx0XHRcdFx0dmFyIGVuZFN0cmVhbSA9IGNyZWF0ZVN0cmVhbSgpXG5cdFx0XHRcdGVuZFN0cmVhbS5tYXAoZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0XHRpZiAodmFsdWUgPT09IHRydWUpIHVucmVnaXN0ZXJTdHJlYW0oc3RyZWFtKSwgdW5yZWdpc3RlclN0cmVhbShlbmRTdHJlYW0pXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdH0pXG5cdFx0XHRcdHN0cmVhbS5fc3RhdGUuZW5kU3RyZWFtID0gZW5kU3RyZWFtXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gc3RyZWFtLl9zdGF0ZS5lbmRTdHJlYW1cblx0XHR9fVxuXHR9KVxufVxuZnVuY3Rpb24gdXBkYXRlU3RyZWFtKHN0cmVhbSwgdmFsdWUpIHtcblx0dXBkYXRlU3RhdGUoc3RyZWFtLCB2YWx1ZSlcblx0Zm9yICh2YXIgaWQgaW4gc3RyZWFtLl9zdGF0ZS5kZXBzKSB1cGRhdGVEZXBlbmRlbmN5KHN0cmVhbS5fc3RhdGUuZGVwc1tpZF0sIGZhbHNlKVxuXHRmaW5hbGl6ZShzdHJlYW0pXG59XG5mdW5jdGlvbiB1cGRhdGVTdGF0ZShzdHJlYW0sIHZhbHVlKSB7XG5cdHN0cmVhbS5fc3RhdGUudmFsdWUgPSB2YWx1ZVxuXHRzdHJlYW0uX3N0YXRlLmNoYW5nZWQgPSB0cnVlXG5cdGlmIChzdHJlYW0uX3N0YXRlLnN0YXRlICE9PSAyKSBzdHJlYW0uX3N0YXRlLnN0YXRlID0gMVxufVxuZnVuY3Rpb24gdXBkYXRlRGVwZW5kZW5jeShzdHJlYW0sIG11c3RTeW5jKSB7XG5cdHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGUsIHBhcmVudHMgPSBzdGF0ZS5wYXJlbnRzXG5cdGlmIChwYXJlbnRzLmxlbmd0aCA+IDAgJiYgcGFyZW50cy5ldmVyeShhY3RpdmUpICYmIChtdXN0U3luYyB8fCBwYXJlbnRzLnNvbWUoY2hhbmdlZCkpKSB7XG5cdFx0dmFyIHZhbHVlID0gc3RyZWFtLl9zdGF0ZS5kZXJpdmUoKVxuXHRcdGlmICh2YWx1ZSA9PT0gSEFMVCkgcmV0dXJuIGZhbHNlXG5cdFx0dXBkYXRlU3RhdGUoc3RyZWFtLCB2YWx1ZSlcblx0fVxufVxuZnVuY3Rpb24gZmluYWxpemUoc3RyZWFtKSB7XG5cdHN0cmVhbS5fc3RhdGUuY2hhbmdlZCA9IGZhbHNlXG5cdGZvciAodmFyIGlkIGluIHN0cmVhbS5fc3RhdGUuZGVwcykgc3RyZWFtLl9zdGF0ZS5kZXBzW2lkXS5fc3RhdGUuY2hhbmdlZCA9IGZhbHNlXG59XG5cbmZ1bmN0aW9uIGNvbWJpbmUoZm4sIHN0cmVhbXMpIHtcblx0aWYgKCFzdHJlYW1zLmV2ZXJ5KHZhbGlkKSkgdGhyb3cgbmV3IEVycm9yKFwiRW5zdXJlIHRoYXQgZWFjaCBpdGVtIHBhc3NlZCB0byBtLnByb3AuY29tYmluZS9tLnByb3AubWVyZ2UgaXMgYSBzdHJlYW1cIilcblx0cmV0dXJuIGluaXREZXBlbmRlbmN5KGNyZWF0ZVN0cmVhbSgpLCBzdHJlYW1zLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkodGhpcywgc3RyZWFtcy5jb25jYXQoW3N0cmVhbXMuZmlsdGVyKGNoYW5nZWQpXSkpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIGluaXREZXBlbmRlbmN5KGRlcCwgc3RyZWFtcywgZGVyaXZlKSB7XG5cdHZhciBzdGF0ZSA9IGRlcC5fc3RhdGVcblx0c3RhdGUuZGVyaXZlID0gZGVyaXZlXG5cdHN0YXRlLnBhcmVudHMgPSBzdHJlYW1zLmZpbHRlcihub3RFbmRlZClcblxuXHRyZWdpc3RlckRlcGVuZGVuY3koZGVwLCBzdGF0ZS5wYXJlbnRzKVxuXHR1cGRhdGVEZXBlbmRlbmN5KGRlcCwgdHJ1ZSlcblxuXHRyZXR1cm4gZGVwXG59XG5mdW5jdGlvbiByZWdpc3RlckRlcGVuZGVuY3koc3RyZWFtLCBwYXJlbnRzKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdHBhcmVudHNbaV0uX3N0YXRlLmRlcHNbc3RyZWFtLl9zdGF0ZS5pZF0gPSBzdHJlYW1cblx0XHRyZWdpc3RlckRlcGVuZGVuY3koc3RyZWFtLCBwYXJlbnRzW2ldLl9zdGF0ZS5wYXJlbnRzKVxuXHR9XG59XG5mdW5jdGlvbiB1bnJlZ2lzdGVyU3RyZWFtKHN0cmVhbSkge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0cmVhbS5fc3RhdGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBwYXJlbnQgPSBzdHJlYW0uX3N0YXRlLnBhcmVudHNbaV1cblx0XHRkZWxldGUgcGFyZW50Ll9zdGF0ZS5kZXBzW3N0cmVhbS5fc3RhdGUuaWRdXG5cdH1cblx0Zm9yICh2YXIgaWQgaW4gc3RyZWFtLl9zdGF0ZS5kZXBzKSB7XG5cdFx0dmFyIGRlcGVuZGVudCA9IHN0cmVhbS5fc3RhdGUuZGVwc1tpZF1cblx0XHR2YXIgaW5kZXggPSBkZXBlbmRlbnQuX3N0YXRlLnBhcmVudHMuaW5kZXhPZihzdHJlYW0pXG5cdFx0aWYgKGluZGV4ID4gLTEpIGRlcGVuZGVudC5fc3RhdGUucGFyZW50cy5zcGxpY2UoaW5kZXgsIDEpXG5cdH1cblx0c3RyZWFtLl9zdGF0ZS5zdGF0ZSA9IDIgLy9lbmRlZFxuXHRzdHJlYW0uX3N0YXRlLmRlcHMgPSB7fVxufVxuXG5mdW5jdGlvbiBtYXAoZm4pIHtyZXR1cm4gY29tYmluZShmdW5jdGlvbihzdHJlYW0pIHtyZXR1cm4gZm4oc3RyZWFtKCkpfSwgW3RoaXNdKX1cbmZ1bmN0aW9uIGFwKHN0cmVhbSkge3JldHVybiBjb21iaW5lKGZ1bmN0aW9uKHMxLCBzMikge3JldHVybiBzMSgpKHMyKCkpfSwgW3N0cmVhbSwgdGhpc10pfVxuZnVuY3Rpb24gdmFsdWVPZigpIHtyZXR1cm4gdGhpcy5fc3RhdGUudmFsdWV9XG5mdW5jdGlvbiB0b0pTT04oKSB7cmV0dXJuIHRoaXMuX3N0YXRlLnZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHRoaXMuX3N0YXRlLnZhbHVlLnRvSlNPTiA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5fc3RhdGUudmFsdWUudG9KU09OKCkgOiB0aGlzLl9zdGF0ZS52YWx1ZX1cblxuZnVuY3Rpb24gdmFsaWQoc3RyZWFtKSB7cmV0dXJuIHN0cmVhbS5fc3RhdGUgfVxuZnVuY3Rpb24gYWN0aXZlKHN0cmVhbSkge3JldHVybiBzdHJlYW0uX3N0YXRlLnN0YXRlID09PSAxfVxuZnVuY3Rpb24gY2hhbmdlZChzdHJlYW0pIHtyZXR1cm4gc3RyZWFtLl9zdGF0ZS5jaGFuZ2VkfVxuZnVuY3Rpb24gbm90RW5kZWQoc3RyZWFtKSB7cmV0dXJuIHN0cmVhbS5fc3RhdGUuc3RhdGUgIT09IDJ9XG5cbmZ1bmN0aW9uIG1lcmdlKHN0cmVhbXMpIHtcblx0cmV0dXJuIGNvbWJpbmUoZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHN0cmVhbXMubWFwKGZ1bmN0aW9uKHMpIHtyZXR1cm4gcygpfSlcblx0fSwgc3RyZWFtcylcbn1cbmNyZWF0ZVN0cmVhbVtcImZhbnRhc3ktbGFuZC9vZlwiXSA9IGNyZWF0ZVN0cmVhbVxuY3JlYXRlU3RyZWFtLm1lcmdlID0gbWVyZ2VcbmNyZWF0ZVN0cmVhbS5jb21iaW5lID0gY29tYmluZVxuY3JlYXRlU3RyZWFtLkhBTFQgPSBIQUxUXG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiKSBtb2R1bGVbXCJleHBvcnRzXCJdID0gY3JlYXRlU3RyZWFtXG5lbHNlIHdpbmRvdy5zdHJlYW0gPSBjcmVhdGVTdHJlYW1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9taXRocmlsL3N0cmVhbS9zdHJlYW0uanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ }),\n/* 7 */\n/* unknown exports provided */\n/* all exports used */\n/*!**************************************!*\\\n  !*** (webpack)/~/process/browser.js ***!\n  \\**************************************/\n/***/ (function(module, exports) {\n\neval(\"// shim for using process in browser\\nvar process = module.exports = {};\\n\\n// cached from whatever global is present so that test runners that stub it\\n// don't break things.  But we need to wrap it in a try catch in case it is\\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\\n// function because try/catches deoptimize in certain engines.\\n\\nvar cachedSetTimeout;\\nvar cachedClearTimeout;\\n\\nfunction defaultSetTimout() {\\n    throw new Error('setTimeout has not been defined');\\n}\\nfunction defaultClearTimeout () {\\n    throw new Error('clearTimeout has not been defined');\\n}\\n(function () {\\n    try {\\n        if (typeof setTimeout === 'function') {\\n            cachedSetTimeout = setTimeout;\\n        } else {\\n            cachedSetTimeout = defaultSetTimout;\\n        }\\n    } catch (e) {\\n        cachedSetTimeout = defaultSetTimout;\\n    }\\n    try {\\n        if (typeof clearTimeout === 'function') {\\n            cachedClearTimeout = clearTimeout;\\n        } else {\\n            cachedClearTimeout = defaultClearTimeout;\\n        }\\n    } catch (e) {\\n        cachedClearTimeout = defaultClearTimeout;\\n    }\\n} ())\\nfunction runTimeout(fun) {\\n    if (cachedSetTimeout === setTimeout) {\\n        //normal enviroments in sane situations\\n        return setTimeout(fun, 0);\\n    }\\n    // if setTimeout wasn't available but was latter defined\\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\\n        cachedSetTimeout = setTimeout;\\n        return setTimeout(fun, 0);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedSetTimeout(fun, 0);\\n    } catch(e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\\n            return cachedSetTimeout.call(null, fun, 0);\\n        } catch(e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\\n            return cachedSetTimeout.call(this, fun, 0);\\n        }\\n    }\\n\\n\\n}\\nfunction runClearTimeout(marker) {\\n    if (cachedClearTimeout === clearTimeout) {\\n        //normal enviroments in sane situations\\n        return clearTimeout(marker);\\n    }\\n    // if clearTimeout wasn't available but was latter defined\\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\\n        cachedClearTimeout = clearTimeout;\\n        return clearTimeout(marker);\\n    }\\n    try {\\n        // when when somebody has screwed with setTimeout but no I.E. maddness\\n        return cachedClearTimeout(marker);\\n    } catch (e){\\n        try {\\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\\n            return cachedClearTimeout.call(null, marker);\\n        } catch (e){\\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\\n            return cachedClearTimeout.call(this, marker);\\n        }\\n    }\\n\\n\\n\\n}\\nvar queue = [];\\nvar draining = false;\\nvar currentQueue;\\nvar queueIndex = -1;\\n\\nfunction cleanUpNextTick() {\\n    if (!draining || !currentQueue) {\\n        return;\\n    }\\n    draining = false;\\n    if (currentQueue.length) {\\n        queue = currentQueue.concat(queue);\\n    } else {\\n        queueIndex = -1;\\n    }\\n    if (queue.length) {\\n        drainQueue();\\n    }\\n}\\n\\nfunction drainQueue() {\\n    if (draining) {\\n        return;\\n    }\\n    var timeout = runTimeout(cleanUpNextTick);\\n    draining = true;\\n\\n    var len = queue.length;\\n    while(len) {\\n        currentQueue = queue;\\n        queue = [];\\n        while (++queueIndex < len) {\\n            if (currentQueue) {\\n                currentQueue[queueIndex].run();\\n            }\\n        }\\n        queueIndex = -1;\\n        len = queue.length;\\n    }\\n    currentQueue = null;\\n    draining = false;\\n    runClearTimeout(timeout);\\n}\\n\\nprocess.nextTick = function (fun) {\\n    var args = new Array(arguments.length - 1);\\n    if (arguments.length > 1) {\\n        for (var i = 1; i < arguments.length; i++) {\\n            args[i - 1] = arguments[i];\\n        }\\n    }\\n    queue.push(new Item(fun, args));\\n    if (queue.length === 1 && !draining) {\\n        runTimeout(drainQueue);\\n    }\\n};\\n\\n// v8 likes predictible objects\\nfunction Item(fun, array) {\\n    this.fun = fun;\\n    this.array = array;\\n}\\nItem.prototype.run = function () {\\n    this.fun.apply(null, this.array);\\n};\\nprocess.title = 'browser';\\nprocess.browser = true;\\nprocess.env = {};\\nprocess.argv = [];\\nprocess.version = ''; // empty string to avoid regexp issues\\nprocess.versions = {};\\n\\nfunction noop() {}\\n\\nprocess.on = noop;\\nprocess.addListener = noop;\\nprocess.once = noop;\\nprocess.off = noop;\\nprocess.removeListener = noop;\\nprocess.removeAllListeners = noop;\\nprocess.emit = noop;\\n\\nprocess.binding = function (name) {\\n    throw new Error('process.binding is not supported');\\n};\\n\\nprocess.cwd = function () { return '/' };\\nprocess.chdir = function (dir) {\\n    throw new Error('process.chdir is not supported');\\n};\\nprocess.umask = function() { return 0; };\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }),\n/* 8 */\n/* unknown exports provided */\n/* all exports used */\n/*!************************************************!*\\\n  !*** (webpack)/~/setimmediate/setImmediate.js ***!\n  \\************************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\\n    \\\"use strict\\\";\\n\\n    if (global.setImmediate) {\\n        return;\\n    }\\n\\n    var nextHandle = 1; // Spec says greater than zero\\n    var tasksByHandle = {};\\n    var currentlyRunningATask = false;\\n    var doc = global.document;\\n    var registerImmediate;\\n\\n    function setImmediate(callback) {\\n      // Callback can either be a function or a string\\n      if (typeof callback !== \\\"function\\\") {\\n        callback = new Function(\\\"\\\" + callback);\\n      }\\n      // Copy function arguments\\n      var args = new Array(arguments.length - 1);\\n      for (var i = 0; i < args.length; i++) {\\n          args[i] = arguments[i + 1];\\n      }\\n      // Store and register the task\\n      var task = { callback: callback, args: args };\\n      tasksByHandle[nextHandle] = task;\\n      registerImmediate(nextHandle);\\n      return nextHandle++;\\n    }\\n\\n    function clearImmediate(handle) {\\n        delete tasksByHandle[handle];\\n    }\\n\\n    function run(task) {\\n        var callback = task.callback;\\n        var args = task.args;\\n        switch (args.length) {\\n        case 0:\\n            callback();\\n            break;\\n        case 1:\\n            callback(args[0]);\\n            break;\\n        case 2:\\n            callback(args[0], args[1]);\\n            break;\\n        case 3:\\n            callback(args[0], args[1], args[2]);\\n            break;\\n        default:\\n            callback.apply(undefined, args);\\n            break;\\n        }\\n    }\\n\\n    function runIfPresent(handle) {\\n        // From the spec: \\\"Wait until any invocations of this algorithm started before this one have completed.\\\"\\n        // So if we're currently running a task, we'll need to delay this invocation.\\n        if (currentlyRunningATask) {\\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\\n            // \\\"too much recursion\\\" error.\\n            setTimeout(runIfPresent, 0, handle);\\n        } else {\\n            var task = tasksByHandle[handle];\\n            if (task) {\\n                currentlyRunningATask = true;\\n                try {\\n                    run(task);\\n                } finally {\\n                    clearImmediate(handle);\\n                    currentlyRunningATask = false;\\n                }\\n            }\\n        }\\n    }\\n\\n    function installNextTickImplementation() {\\n        registerImmediate = function(handle) {\\n            process.nextTick(function () { runIfPresent(handle); });\\n        };\\n    }\\n\\n    function canUsePostMessage() {\\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\\n        if (global.postMessage && !global.importScripts) {\\n            var postMessageIsAsynchronous = true;\\n            var oldOnMessage = global.onmessage;\\n            global.onmessage = function() {\\n                postMessageIsAsynchronous = false;\\n            };\\n            global.postMessage(\\\"\\\", \\\"*\\\");\\n            global.onmessage = oldOnMessage;\\n            return postMessageIsAsynchronous;\\n        }\\n    }\\n\\n    function installPostMessageImplementation() {\\n        // Installs an event handler on `global` for the `message` event: see\\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\\n\\n        var messagePrefix = \\\"setImmediate$\\\" + Math.random() + \\\"$\\\";\\n        var onGlobalMessage = function(event) {\\n            if (event.source === global &&\\n                typeof event.data === \\\"string\\\" &&\\n                event.data.indexOf(messagePrefix) === 0) {\\n                runIfPresent(+event.data.slice(messagePrefix.length));\\n            }\\n        };\\n\\n        if (global.addEventListener) {\\n            global.addEventListener(\\\"message\\\", onGlobalMessage, false);\\n        } else {\\n            global.attachEvent(\\\"onmessage\\\", onGlobalMessage);\\n        }\\n\\n        registerImmediate = function(handle) {\\n            global.postMessage(messagePrefix + handle, \\\"*\\\");\\n        };\\n    }\\n\\n    function installMessageChannelImplementation() {\\n        var channel = new MessageChannel();\\n        channel.port1.onmessage = function(event) {\\n            var handle = event.data;\\n            runIfPresent(handle);\\n        };\\n\\n        registerImmediate = function(handle) {\\n            channel.port2.postMessage(handle);\\n        };\\n    }\\n\\n    function installReadyStateChangeImplementation() {\\n        var html = doc.documentElement;\\n        registerImmediate = function(handle) {\\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\\n            var script = doc.createElement(\\\"script\\\");\\n            script.onreadystatechange = function () {\\n                runIfPresent(handle);\\n                script.onreadystatechange = null;\\n                html.removeChild(script);\\n                script = null;\\n            };\\n            html.appendChild(script);\\n        };\\n    }\\n\\n    function installSetTimeoutImplementation() {\\n        registerImmediate = function(handle) {\\n            setTimeout(runIfPresent, 0, handle);\\n        };\\n    }\\n\\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\\n\\n    // Don't get fooled by e.g. browserify environments.\\n    if ({}.toString.call(global.process) === \\\"[object process]\\\") {\\n        // For Node.js before 0.9\\n        installNextTickImplementation();\\n\\n    } else if (canUsePostMessage()) {\\n        // For non-IE10 modern browsers\\n        installPostMessageImplementation();\\n\\n    } else if (global.MessageChannel) {\\n        // For web workers, where supported\\n        installMessageChannelImplementation();\\n\\n    } else if (doc && \\\"onreadystatechange\\\" in doc.createElement(\\\"script\\\")) {\\n        // For IE 6–8\\n        installReadyStateChangeImplementation();\\n\\n    } else {\\n        // For older browsers\\n        installSetTimeoutImplementation();\\n    }\\n\\n    attachTo.setImmediate = setImmediate;\\n    attachTo.clearImmediate = clearImmediate;\\n}(typeof self === \\\"undefined\\\" ? typeof global === \\\"undefined\\\" ? this : global : self));\\n\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../buildin/global.js */ 3), __webpack_require__(/*! ./../process/browser.js */ 7)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }),\n/* 9 */\n/* unknown exports provided */\n/* all exports used */\n/*!*********************************************!*\\\n  !*** (webpack)/~/timers-browserify/main.js ***!\n  \\*********************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"var apply = Function.prototype.apply;\\n\\n// DOM APIs, for completeness\\n\\nexports.setTimeout = function() {\\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\\n};\\nexports.setInterval = function() {\\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\\n};\\nexports.clearTimeout =\\nexports.clearInterval = function(timeout) {\\n  if (timeout) {\\n    timeout.close();\\n  }\\n};\\n\\nfunction Timeout(id, clearFn) {\\n  this._id = id;\\n  this._clearFn = clearFn;\\n}\\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\\nTimeout.prototype.close = function() {\\n  this._clearFn.call(window, this._id);\\n};\\n\\n// Does not start the time, just sets up the members needed.\\nexports.enroll = function(item, msecs) {\\n  clearTimeout(item._idleTimeoutId);\\n  item._idleTimeout = msecs;\\n};\\n\\nexports.unenroll = function(item) {\\n  clearTimeout(item._idleTimeoutId);\\n  item._idleTimeout = -1;\\n};\\n\\nexports._unrefActive = exports.active = function(item) {\\n  clearTimeout(item._idleTimeoutId);\\n\\n  var msecs = item._idleTimeout;\\n  if (msecs >= 0) {\\n    item._idleTimeoutId = setTimeout(function onTimeout() {\\n      if (item._onTimeout)\\n        item._onTimeout();\\n    }, msecs);\\n  }\\n};\\n\\n// setimmediate attaches itself to the global object\\n__webpack_require__(/*! setimmediate */ 8);\\nexports.setImmediate = setImmediate;\\nexports.clearImmediate = clearImmediate;\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvfi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzP2Y4NTUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ }),\n/* 10 */\n/* unknown exports provided */\n/* all exports used */\n/*!*********************************************************************************!*\\\n  !*** multi ./src/models/user.js ./src/admin-menu.js ./src/postman-admin-app.js ***!\n  \\*********************************************************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(/*! /home/ken/src/postman/public/src/models/user.js */2);\n__webpack_require__(/*! /home/ken/src/postman/public/src/admin-menu.js */1);\nmodule.exports = __webpack_require__(/*! /home/ken/src/postman/public/src/postman-admin-app.js */4);\n\n\n/***/ })\n/******/ ]);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 6 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./src/postman-admin-app.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var m = __webpack_require__(/*! mithril */ 1);\nvar User = __webpack_require__(/*! ./models/user */ 0);\nvar AdminMenu = __webpack_require__(/*! ./admin-menu */ 2);\n\nvar root = document.getElementById(\"root\");\nm.route(root, \"/admin-menu\", {\n    \"/admin-menu\": AdminMenu,\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9wb3N0bWFuLWFkbWluLWFwcC5qcz85NGRmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBtID0gcmVxdWlyZShcIm1pdGhyaWxcIik7XG52YXIgVXNlciA9IHJlcXVpcmUoXCIuL21vZGVscy91c2VyXCIpO1xudmFyIEFkbWluTWVudSA9IHJlcXVpcmUoXCIuL2FkbWluLW1lbnVcIik7XG5cbnZhciByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpO1xubS5yb3V0ZShyb290LCBcIi9hZG1pbi1tZW51XCIsIHtcbiAgICBcIi9hZG1pbi1tZW51XCI6IEFkbWluTWVudSxcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcG9zdG1hbi1hZG1pbi1hcHAuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */
/* unknown exports provided */
/* all exports used */
/*!************************************!*\
  !*** ./~/mithril/stream/stream.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar guid = 0, HALT = {}\nfunction createStream() {\n\tfunction stream() {\n\t\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\t\treturn stream._state.value\n\t}\n\tinitStream(stream)\n\n\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\n\treturn stream\n}\nfunction initStream(stream) {\n\tstream.constructor = createStream\n\tstream._state = {id: guid++, value: undefined, state: 0, derive: undefined, recover: undefined, deps: {}, parents: [], endStream: undefined}\n\tstream.map = stream[\"fantasy-land/map\"] = map, stream[\"fantasy-land/ap\"] = ap, stream[\"fantasy-land/of\"] = createStream\n\tstream.valueOf = valueOf, stream.toJSON = toJSON, stream.toString = valueOf\n\n\tObject.defineProperties(stream, {\n\t\tend: {get: function() {\n\t\t\tif (!stream._state.endStream) {\n\t\t\t\tvar endStream = createStream()\n\t\t\t\tendStream.map(function(value) {\n\t\t\t\t\tif (value === true) unregisterStream(stream), unregisterStream(endStream)\n\t\t\t\t\treturn value\n\t\t\t\t})\n\t\t\t\tstream._state.endStream = endStream\n\t\t\t}\n\t\t\treturn stream._state.endStream\n\t\t}}\n\t})\n}\nfunction updateStream(stream, value) {\n\tupdateState(stream, value)\n\tfor (var id in stream._state.deps) updateDependency(stream._state.deps[id], false)\n\tfinalize(stream)\n}\nfunction updateState(stream, value) {\n\tstream._state.value = value\n\tstream._state.changed = true\n\tif (stream._state.state !== 2) stream._state.state = 1\n}\nfunction updateDependency(stream, mustSync) {\n\tvar state = stream._state, parents = state.parents\n\tif (parents.length > 0 && parents.every(active) && (mustSync || parents.some(changed))) {\n\t\tvar value = stream._state.derive()\n\t\tif (value === HALT) return false\n\t\tupdateState(stream, value)\n\t}\n}\nfunction finalize(stream) {\n\tstream._state.changed = false\n\tfor (var id in stream._state.deps) stream._state.deps[id]._state.changed = false\n}\n\nfunction combine(fn, streams) {\n\tif (!streams.every(valid)) throw new Error(\"Ensure that each item passed to m.prop.combine/m.prop.merge is a stream\")\n\treturn initDependency(createStream(), streams, function() {\n\t\treturn fn.apply(this, streams.concat([streams.filter(changed)]))\n\t})\n}\n\nfunction initDependency(dep, streams, derive) {\n\tvar state = dep._state\n\tstate.derive = derive\n\tstate.parents = streams.filter(notEnded)\n\n\tregisterDependency(dep, state.parents)\n\tupdateDependency(dep, true)\n\n\treturn dep\n}\nfunction registerDependency(stream, parents) {\n\tfor (var i = 0; i < parents.length; i++) {\n\t\tparents[i]._state.deps[stream._state.id] = stream\n\t\tregisterDependency(stream, parents[i]._state.parents)\n\t}\n}\nfunction unregisterStream(stream) {\n\tfor (var i = 0; i < stream._state.parents.length; i++) {\n\t\tvar parent = stream._state.parents[i]\n\t\tdelete parent._state.deps[stream._state.id]\n\t}\n\tfor (var id in stream._state.deps) {\n\t\tvar dependent = stream._state.deps[id]\n\t\tvar index = dependent._state.parents.indexOf(stream)\n\t\tif (index > -1) dependent._state.parents.splice(index, 1)\n\t}\n\tstream._state.state = 2 //ended\n\tstream._state.deps = {}\n}\n\nfunction map(fn) {return combine(function(stream) {return fn(stream())}, [this])}\nfunction ap(stream) {return combine(function(s1, s2) {return s1()(s2())}, [stream, this])}\nfunction valueOf() {return this._state.value}\nfunction toJSON() {return this._state.value != null && typeof this._state.value.toJSON === \"function\" ? this._state.value.toJSON() : this._state.value}\n\nfunction valid(stream) {return stream._state }\nfunction active(stream) {return stream._state.state === 1}\nfunction changed(stream) {return stream._state.changed}\nfunction notEnded(stream) {return stream._state.state !== 2}\n\nfunction merge(streams) {\n\treturn combine(function() {\n\t\treturn streams.map(function(s) {return s()})\n\t}, streams)\n}\ncreateStream[\"fantasy-land/of\"] = createStream\ncreateStream.merge = merge\ncreateStream.combine = combine\ncreateStream.HALT = HALT\n\nif (true) module[\"exports\"] = createStream\nelse window.stream = createStream\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vbWl0aHJpbC9zdHJlYW0vc3RyZWFtLmpzPzAwZWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIGd1aWQgPSAwLCBIQUxUID0ge31cbmZ1bmN0aW9uIGNyZWF0ZVN0cmVhbSgpIHtcblx0ZnVuY3Rpb24gc3RyZWFtKCkge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IEhBTFQpIHVwZGF0ZVN0cmVhbShzdHJlYW0sIGFyZ3VtZW50c1swXSlcblx0XHRyZXR1cm4gc3RyZWFtLl9zdGF0ZS52YWx1ZVxuXHR9XG5cdGluaXRTdHJlYW0oc3RyZWFtKVxuXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IEhBTFQpIHVwZGF0ZVN0cmVhbShzdHJlYW0sIGFyZ3VtZW50c1swXSlcblxuXHRyZXR1cm4gc3RyZWFtXG59XG5mdW5jdGlvbiBpbml0U3RyZWFtKHN0cmVhbSkge1xuXHRzdHJlYW0uY29uc3RydWN0b3IgPSBjcmVhdGVTdHJlYW1cblx0c3RyZWFtLl9zdGF0ZSA9IHtpZDogZ3VpZCsrLCB2YWx1ZTogdW5kZWZpbmVkLCBzdGF0ZTogMCwgZGVyaXZlOiB1bmRlZmluZWQsIHJlY292ZXI6IHVuZGVmaW5lZCwgZGVwczoge30sIHBhcmVudHM6IFtdLCBlbmRTdHJlYW06IHVuZGVmaW5lZH1cblx0c3RyZWFtLm1hcCA9IHN0cmVhbVtcImZhbnRhc3ktbGFuZC9tYXBcIl0gPSBtYXAsIHN0cmVhbVtcImZhbnRhc3ktbGFuZC9hcFwiXSA9IGFwLCBzdHJlYW1bXCJmYW50YXN5LWxhbmQvb2ZcIl0gPSBjcmVhdGVTdHJlYW1cblx0c3RyZWFtLnZhbHVlT2YgPSB2YWx1ZU9mLCBzdHJlYW0udG9KU09OID0gdG9KU09OLCBzdHJlYW0udG9TdHJpbmcgPSB2YWx1ZU9mXG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyZWFtLCB7XG5cdFx0ZW5kOiB7Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICghc3RyZWFtLl9zdGF0ZS5lbmRTdHJlYW0pIHtcblx0XHRcdFx0dmFyIGVuZFN0cmVhbSA9IGNyZWF0ZVN0cmVhbSgpXG5cdFx0XHRcdGVuZFN0cmVhbS5tYXAoZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0XHRpZiAodmFsdWUgPT09IHRydWUpIHVucmVnaXN0ZXJTdHJlYW0oc3RyZWFtKSwgdW5yZWdpc3RlclN0cmVhbShlbmRTdHJlYW0pXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdH0pXG5cdFx0XHRcdHN0cmVhbS5fc3RhdGUuZW5kU3RyZWFtID0gZW5kU3RyZWFtXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gc3RyZWFtLl9zdGF0ZS5lbmRTdHJlYW1cblx0XHR9fVxuXHR9KVxufVxuZnVuY3Rpb24gdXBkYXRlU3RyZWFtKHN0cmVhbSwgdmFsdWUpIHtcblx0dXBkYXRlU3RhdGUoc3RyZWFtLCB2YWx1ZSlcblx0Zm9yICh2YXIgaWQgaW4gc3RyZWFtLl9zdGF0ZS5kZXBzKSB1cGRhdGVEZXBlbmRlbmN5KHN0cmVhbS5fc3RhdGUuZGVwc1tpZF0sIGZhbHNlKVxuXHRmaW5hbGl6ZShzdHJlYW0pXG59XG5mdW5jdGlvbiB1cGRhdGVTdGF0ZShzdHJlYW0sIHZhbHVlKSB7XG5cdHN0cmVhbS5fc3RhdGUudmFsdWUgPSB2YWx1ZVxuXHRzdHJlYW0uX3N0YXRlLmNoYW5nZWQgPSB0cnVlXG5cdGlmIChzdHJlYW0uX3N0YXRlLnN0YXRlICE9PSAyKSBzdHJlYW0uX3N0YXRlLnN0YXRlID0gMVxufVxuZnVuY3Rpb24gdXBkYXRlRGVwZW5kZW5jeShzdHJlYW0sIG11c3RTeW5jKSB7XG5cdHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGUsIHBhcmVudHMgPSBzdGF0ZS5wYXJlbnRzXG5cdGlmIChwYXJlbnRzLmxlbmd0aCA+IDAgJiYgcGFyZW50cy5ldmVyeShhY3RpdmUpICYmIChtdXN0U3luYyB8fCBwYXJlbnRzLnNvbWUoY2hhbmdlZCkpKSB7XG5cdFx0dmFyIHZhbHVlID0gc3RyZWFtLl9zdGF0ZS5kZXJpdmUoKVxuXHRcdGlmICh2YWx1ZSA9PT0gSEFMVCkgcmV0dXJuIGZhbHNlXG5cdFx0dXBkYXRlU3RhdGUoc3RyZWFtLCB2YWx1ZSlcblx0fVxufVxuZnVuY3Rpb24gZmluYWxpemUoc3RyZWFtKSB7XG5cdHN0cmVhbS5fc3RhdGUuY2hhbmdlZCA9IGZhbHNlXG5cdGZvciAodmFyIGlkIGluIHN0cmVhbS5fc3RhdGUuZGVwcykgc3RyZWFtLl9zdGF0ZS5kZXBzW2lkXS5fc3RhdGUuY2hhbmdlZCA9IGZhbHNlXG59XG5cbmZ1bmN0aW9uIGNvbWJpbmUoZm4sIHN0cmVhbXMpIHtcblx0aWYgKCFzdHJlYW1zLmV2ZXJ5KHZhbGlkKSkgdGhyb3cgbmV3IEVycm9yKFwiRW5zdXJlIHRoYXQgZWFjaCBpdGVtIHBhc3NlZCB0byBtLnByb3AuY29tYmluZS9tLnByb3AubWVyZ2UgaXMgYSBzdHJlYW1cIilcblx0cmV0dXJuIGluaXREZXBlbmRlbmN5KGNyZWF0ZVN0cmVhbSgpLCBzdHJlYW1zLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkodGhpcywgc3RyZWFtcy5jb25jYXQoW3N0cmVhbXMuZmlsdGVyKGNoYW5nZWQpXSkpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIGluaXREZXBlbmRlbmN5KGRlcCwgc3RyZWFtcywgZGVyaXZlKSB7XG5cdHZhciBzdGF0ZSA9IGRlcC5fc3RhdGVcblx0c3RhdGUuZGVyaXZlID0gZGVyaXZlXG5cdHN0YXRlLnBhcmVudHMgPSBzdHJlYW1zLmZpbHRlcihub3RFbmRlZClcblxuXHRyZWdpc3RlckRlcGVuZGVuY3koZGVwLCBzdGF0ZS5wYXJlbnRzKVxuXHR1cGRhdGVEZXBlbmRlbmN5KGRlcCwgdHJ1ZSlcblxuXHRyZXR1cm4gZGVwXG59XG5mdW5jdGlvbiByZWdpc3RlckRlcGVuZGVuY3koc3RyZWFtLCBwYXJlbnRzKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdHBhcmVudHNbaV0uX3N0YXRlLmRlcHNbc3RyZWFtLl9zdGF0ZS5pZF0gPSBzdHJlYW1cblx0XHRyZWdpc3RlckRlcGVuZGVuY3koc3RyZWFtLCBwYXJlbnRzW2ldLl9zdGF0ZS5wYXJlbnRzKVxuXHR9XG59XG5mdW5jdGlvbiB1bnJlZ2lzdGVyU3RyZWFtKHN0cmVhbSkge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0cmVhbS5fc3RhdGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBwYXJlbnQgPSBzdHJlYW0uX3N0YXRlLnBhcmVudHNbaV1cblx0XHRkZWxldGUgcGFyZW50Ll9zdGF0ZS5kZXBzW3N0cmVhbS5fc3RhdGUuaWRdXG5cdH1cblx0Zm9yICh2YXIgaWQgaW4gc3RyZWFtLl9zdGF0ZS5kZXBzKSB7XG5cdFx0dmFyIGRlcGVuZGVudCA9IHN0cmVhbS5fc3RhdGUuZGVwc1tpZF1cblx0XHR2YXIgaW5kZXggPSBkZXBlbmRlbnQuX3N0YXRlLnBhcmVudHMuaW5kZXhPZihzdHJlYW0pXG5cdFx0aWYgKGluZGV4ID4gLTEpIGRlcGVuZGVudC5fc3RhdGUucGFyZW50cy5zcGxpY2UoaW5kZXgsIDEpXG5cdH1cblx0c3RyZWFtLl9zdGF0ZS5zdGF0ZSA9IDIgLy9lbmRlZFxuXHRzdHJlYW0uX3N0YXRlLmRlcHMgPSB7fVxufVxuXG5mdW5jdGlvbiBtYXAoZm4pIHtyZXR1cm4gY29tYmluZShmdW5jdGlvbihzdHJlYW0pIHtyZXR1cm4gZm4oc3RyZWFtKCkpfSwgW3RoaXNdKX1cbmZ1bmN0aW9uIGFwKHN0cmVhbSkge3JldHVybiBjb21iaW5lKGZ1bmN0aW9uKHMxLCBzMikge3JldHVybiBzMSgpKHMyKCkpfSwgW3N0cmVhbSwgdGhpc10pfVxuZnVuY3Rpb24gdmFsdWVPZigpIHtyZXR1cm4gdGhpcy5fc3RhdGUudmFsdWV9XG5mdW5jdGlvbiB0b0pTT04oKSB7cmV0dXJuIHRoaXMuX3N0YXRlLnZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHRoaXMuX3N0YXRlLnZhbHVlLnRvSlNPTiA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5fc3RhdGUudmFsdWUudG9KU09OKCkgOiB0aGlzLl9zdGF0ZS52YWx1ZX1cblxuZnVuY3Rpb24gdmFsaWQoc3RyZWFtKSB7cmV0dXJuIHN0cmVhbS5fc3RhdGUgfVxuZnVuY3Rpb24gYWN0aXZlKHN0cmVhbSkge3JldHVybiBzdHJlYW0uX3N0YXRlLnN0YXRlID09PSAxfVxuZnVuY3Rpb24gY2hhbmdlZChzdHJlYW0pIHtyZXR1cm4gc3RyZWFtLl9zdGF0ZS5jaGFuZ2VkfVxuZnVuY3Rpb24gbm90RW5kZWQoc3RyZWFtKSB7cmV0dXJuIHN0cmVhbS5fc3RhdGUuc3RhdGUgIT09IDJ9XG5cbmZ1bmN0aW9uIG1lcmdlKHN0cmVhbXMpIHtcblx0cmV0dXJuIGNvbWJpbmUoZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHN0cmVhbXMubWFwKGZ1bmN0aW9uKHMpIHtyZXR1cm4gcygpfSlcblx0fSwgc3RyZWFtcylcbn1cbmNyZWF0ZVN0cmVhbVtcImZhbnRhc3ktbGFuZC9vZlwiXSA9IGNyZWF0ZVN0cmVhbVxuY3JlYXRlU3RyZWFtLm1lcmdlID0gbWVyZ2VcbmNyZWF0ZVN0cmVhbS5jb21iaW5lID0gY29tYmluZVxuY3JlYXRlU3RyZWFtLkhBTFQgPSBIQUxUXG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiKSBtb2R1bGVbXCJleHBvcnRzXCJdID0gY3JlYXRlU3RyZWFtXG5lbHNlIHdpbmRvdy5zdHJlYW0gPSBjcmVhdGVTdHJlYW1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9taXRocmlsL3N0cmVhbS9zdHJlYW0uanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 8 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** (webpack)/~/process/browser.js ***!
  \**************************************/
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 9 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** (webpack)/~/setimmediate/setImmediate.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../buildin/global.js */ 4), __webpack_require__(/*! ./../process/browser.js */ 8)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 10 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** (webpack)/~/timers-browserify/main.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ 9);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz9mODU1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 11 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************************************************!*\
  !*** multi ./src/models/user.js ./src/admin-menu.js ./src/postman-admin-app.js ./postman-admin.js ***!
  \****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /home/ken/src/postman/public/src/models/user.js */0);
__webpack_require__(/*! /home/ken/src/postman/public/src/admin-menu.js */2);
__webpack_require__(/*! /home/ken/src/postman/public/src/postman-admin-app.js */6);
module.exports = __webpack_require__(/*! /home/ken/src/postman/public/postman-admin.js */5);


/***/ }),
/* 12 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./src/admin-append-user.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var m = __webpack_require__(/*! mithril */ 1);\nvar stream = __webpack_require__(/*! mithril/stream */ 3);\nvar User = __webpack_require__(/*! ./models/user */ 0);\n\nvar AdminAppendUser = {\n    oninit: function(vnode) {\n\tvnode.state.username = stream(\"\");\n\tvnode.state.password = stream(\"\");\n    },\n    view: function(vnode) {\n\treturn m(\".panel.panel-default\", [\n\t    m(\".panel-heading\", \n\t      m(\"h3.panel-title\", \"ユーザの追加\")),\n\t    m(\".panel-body\", [\n\t\tm(\"form\", [\n\t\t    m(\".form-group\", [\n\t\t\tm(\"label\", {for: \"new-username\"}, \"ユーザ名\"),\n\t\t\tm(\"input.form-control#new-username[type=text]\",\n\t\t\t  {value: vnode.state.username(),\n\t\t\t   onkeyup: m.withAttr(\"value\",\n\t\t\t\t\t\tvnode.state.username)})\n\t\t    ]), // form-group\n\t\t    m(\".form-group\", [\n\t\t\tm(\"label\", {for: \"new-password\"}, \"パスワード\"),\n\t\t\tm(\"input.form-control#new-password[type=password]\",\n\t\t\t  {value: vnode.state.password(),\n\t\t\t   onkeyup: m.withAttr(\"value\",\n\t\t\t\t\t       vnode.state.password)})\n\t\t    ]),\n\t\t]), // form\n\t    ]), // panel-body\n\t]); // panel\n    },\n};\n\nmodule.exports = AdminAppendUser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYWRtaW4tYXBwZW5kLXVzZXIuanM/ZDhiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbSA9IHJlcXVpcmUoXCJtaXRocmlsXCIpO1xudmFyIHN0cmVhbSA9IHJlcXVpcmUoXCJtaXRocmlsL3N0cmVhbVwiKTtcbnZhciBVc2VyID0gcmVxdWlyZShcIi4vbW9kZWxzL3VzZXJcIik7XG5cbnZhciBBZG1pbkFwcGVuZFVzZXIgPSB7XG4gICAgb25pbml0OiBmdW5jdGlvbih2bm9kZSkge1xuXHR2bm9kZS5zdGF0ZS51c2VybmFtZSA9IHN0cmVhbShcIlwiKTtcblx0dm5vZGUuc3RhdGUucGFzc3dvcmQgPSBzdHJlYW0oXCJcIik7XG4gICAgfSxcbiAgICB2aWV3OiBmdW5jdGlvbih2bm9kZSkge1xuXHRyZXR1cm4gbShcIi5wYW5lbC5wYW5lbC1kZWZhdWx0XCIsIFtcblx0ICAgIG0oXCIucGFuZWwtaGVhZGluZ1wiLCBcblx0ICAgICAgbShcImgzLnBhbmVsLXRpdGxlXCIsIFwi44Om44O844K244Gu6L+95YqgXCIpKSxcblx0ICAgIG0oXCIucGFuZWwtYm9keVwiLCBbXG5cdFx0bShcImZvcm1cIiwgW1xuXHRcdCAgICBtKFwiLmZvcm0tZ3JvdXBcIiwgW1xuXHRcdFx0bShcImxhYmVsXCIsIHtmb3I6IFwibmV3LXVzZXJuYW1lXCJ9LCBcIuODpuODvOOCtuWQjVwiKSxcblx0XHRcdG0oXCJpbnB1dC5mb3JtLWNvbnRyb2wjbmV3LXVzZXJuYW1lW3R5cGU9dGV4dF1cIixcblx0XHRcdCAge3ZhbHVlOiB2bm9kZS5zdGF0ZS51c2VybmFtZSgpLFxuXHRcdFx0ICAgb25rZXl1cDogbS53aXRoQXR0cihcInZhbHVlXCIsXG5cdFx0XHRcdFx0XHR2bm9kZS5zdGF0ZS51c2VybmFtZSl9KVxuXHRcdCAgICBdKSwgLy8gZm9ybS1ncm91cFxuXHRcdCAgICBtKFwiLmZvcm0tZ3JvdXBcIiwgW1xuXHRcdFx0bShcImxhYmVsXCIsIHtmb3I6IFwibmV3LXBhc3N3b3JkXCJ9LCBcIuODkeOCueODr+ODvOODiVwiKSxcblx0XHRcdG0oXCJpbnB1dC5mb3JtLWNvbnRyb2wjbmV3LXBhc3N3b3JkW3R5cGU9cGFzc3dvcmRdXCIsXG5cdFx0XHQgIHt2YWx1ZTogdm5vZGUuc3RhdGUucGFzc3dvcmQoKSxcblx0XHRcdCAgIG9ua2V5dXA6IG0ud2l0aEF0dHIoXCJ2YWx1ZVwiLFxuXHRcdFx0XHRcdCAgICAgICB2bm9kZS5zdGF0ZS5wYXNzd29yZCl9KVxuXHRcdCAgICBdKSxcblx0XHRdKSwgLy8gZm9ybVxuXHQgICAgXSksIC8vIHBhbmVsLWJvZHlcblx0XSk7IC8vIHBhbmVsXG4gICAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWRtaW5BcHBlbmRVc2VyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYWRtaW4tYXBwZW5kLXVzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ })
/******/ ]);